
Robot_Arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004590  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004754  08004754  00005754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004784  08004784  00006048  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004784  08004784  00005784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800478c  0800478c  00006048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800478c  0800478c  0000578c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004790  08004790  00005790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000048  20000000  08004794  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000048  080047dc  00006048  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  080047dc  00006154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006048  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e28  00000000  00000000  00006078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002359  00000000  00000000  00016ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  00019200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c4c  00000000  00000000  0001a188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021d9b  00000000  00000000  0001add4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013040  00000000  00000000  0003cb6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d02ec  00000000  00000000  0004fbaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011fe9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000421c  00000000  00000000  0011fee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  001240fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000048 	.word	0x20000048
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800473c 	.word	0x0800473c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000004c 	.word	0x2000004c
 8000200:	0800473c 	.word	0x0800473c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f000 fc70 	bl	8000e18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f8f2 	bl	8000720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053c:	f000 fa08 	bl	8000950 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000540:	f000 f9dc 	bl	80008fc <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8000544:	f000 f95e 	bl	8000804 <MX_I2C2_Init>
  MX_TIM10_Init();
 8000548:	f000 f98a 	bl	8000860 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  servo_driver_init(&hi2c2);
 800054c:	4869      	ldr	r0, [pc, #420]	@ (80006f4 <main+0x1c4>)
 800054e:	f003 ff71 	bl	8004434 <servo_driver_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Gripper Button
	  if (HAL_GPIO_ReadPin(GRIPPER_BTN_GPIO_Port, GRIPPER_BTN_Pin) == GPIO_PIN_RESET)
 8000552:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000556:	4868      	ldr	r0, [pc, #416]	@ (80006f8 <main+0x1c8>)
 8000558:	f000 ff9a 	bl	8001490 <HAL_GPIO_ReadPin>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d10d      	bne.n	800057e <main+0x4e>
	  {
		  if (servos[CH5_GRIPPER].current_tick == SERVO_GRIPPER_CLOSE_TICK)
 8000562:	4b66      	ldr	r3, [pc, #408]	@ (80006fc <main+0x1cc>)
 8000564:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8000566:	2b64      	cmp	r3, #100	@ 0x64
 8000568:	d105      	bne.n	8000576 <main+0x46>
		  {
			  servo_set_pwm(&servos[CH5_GRIPPER], SERVO_GRIPPER_OPEN_TICK);
 800056a:	f44f 7102 	mov.w	r1, #520	@ 0x208
 800056e:	4864      	ldr	r0, [pc, #400]	@ (8000700 <main+0x1d0>)
 8000570:	f003 ffa8 	bl	80044c4 <servo_set_pwm>
 8000574:	e003      	b.n	800057e <main+0x4e>
		  }
		  else
		  {
			  servo_set_pwm(&servos[CH5_GRIPPER], SERVO_GRIPPER_CLOSE_TICK);
 8000576:	2164      	movs	r1, #100	@ 0x64
 8000578:	4861      	ldr	r0, [pc, #388]	@ (8000700 <main+0x1d0>)
 800057a:	f003 ffa3 	bl	80044c4 <servo_set_pwm>
		  }
	  }

	  //Wrist up and down Buttons
	  if (HAL_GPIO_ReadPin(WRIST_MINUS_BTN_GPIO_Port, WRIST_MINUS_BTN_Pin) == GPIO_PIN_RESET)
 800057e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000582:	4860      	ldr	r0, [pc, #384]	@ (8000704 <main+0x1d4>)
 8000584:	f000 ff84 	bl	8001490 <HAL_GPIO_ReadPin>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d108      	bne.n	80005a0 <main+0x70>
	  {
		  servo_set_pwm(&servos[CH3_WRIST], servos[CH3_WRIST].current_tick - 10);
 800058e:	4b5b      	ldr	r3, [pc, #364]	@ (80006fc <main+0x1cc>)
 8000590:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8000592:	3b0a      	subs	r3, #10
 8000594:	b29b      	uxth	r3, r3
 8000596:	4619      	mov	r1, r3
 8000598:	485b      	ldr	r0, [pc, #364]	@ (8000708 <main+0x1d8>)
 800059a:	f003 ff93 	bl	80044c4 <servo_set_pwm>
 800059e:	e00e      	b.n	80005be <main+0x8e>
	  }
	  else if (HAL_GPIO_ReadPin(WRIST_PLUS_BTN_GPIO_Port, WRIST_PLUS_BTN_Pin) == GPIO_PIN_RESET)
 80005a0:	2120      	movs	r1, #32
 80005a2:	4855      	ldr	r0, [pc, #340]	@ (80006f8 <main+0x1c8>)
 80005a4:	f000 ff74 	bl	8001490 <HAL_GPIO_ReadPin>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d107      	bne.n	80005be <main+0x8e>
	  {
		  servo_set_pwm(&servos[CH3_WRIST], servos[CH3_WRIST].current_tick + 10);
 80005ae:	4b53      	ldr	r3, [pc, #332]	@ (80006fc <main+0x1cc>)
 80005b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80005b2:	330a      	adds	r3, #10
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	4619      	mov	r1, r3
 80005b8:	4853      	ldr	r0, [pc, #332]	@ (8000708 <main+0x1d8>)
 80005ba:	f003 ff83 	bl	80044c4 <servo_set_pwm>
	  }

	  //Wrist rotation buttons
	  if (HAL_GPIO_ReadPin(WRIST_ROTATE_MINUS_BTN_GPIO_Port, WRIST_ROTATE_MINUS_BTN_Pin) == GPIO_PIN_RESET)
 80005be:	2140      	movs	r1, #64	@ 0x40
 80005c0:	484d      	ldr	r0, [pc, #308]	@ (80006f8 <main+0x1c8>)
 80005c2:	f000 ff65 	bl	8001490 <HAL_GPIO_ReadPin>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d108      	bne.n	80005de <main+0xae>
	  {
		  servo_set_pwm(&servos[CH4_GRIPPER_ROTATOR], servos[CH4_GRIPPER_ROTATOR].current_tick - 10);
 80005cc:	4b4b      	ldr	r3, [pc, #300]	@ (80006fc <main+0x1cc>)
 80005ce:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80005d0:	3b0a      	subs	r3, #10
 80005d2:	b29b      	uxth	r3, r3
 80005d4:	4619      	mov	r1, r3
 80005d6:	484d      	ldr	r0, [pc, #308]	@ (800070c <main+0x1dc>)
 80005d8:	f003 ff74 	bl	80044c4 <servo_set_pwm>
 80005dc:	e00f      	b.n	80005fe <main+0xce>
	  }
	  else if (HAL_GPIO_ReadPin(WRIST_ROTATE_PLUS_BTN_GPIO_Port, WRIST_ROTATE_PLUS_BTN_Pin) == GPIO_PIN_RESET)
 80005de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005e2:	4845      	ldr	r0, [pc, #276]	@ (80006f8 <main+0x1c8>)
 80005e4:	f000 ff54 	bl	8001490 <HAL_GPIO_ReadPin>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d107      	bne.n	80005fe <main+0xce>
	  {
		  servo_set_pwm(&servos[CH4_GRIPPER_ROTATOR], servos[CH4_GRIPPER_ROTATOR].current_tick + 10);
 80005ee:	4b43      	ldr	r3, [pc, #268]	@ (80006fc <main+0x1cc>)
 80005f0:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80005f2:	330a      	adds	r3, #10
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	4619      	mov	r1, r3
 80005f8:	4844      	ldr	r0, [pc, #272]	@ (800070c <main+0x1dc>)
 80005fa:	f003 ff63 	bl	80044c4 <servo_set_pwm>
	  }

	  //Elbow rotation buttons
	  if (HAL_GPIO_ReadPin(ELBOW_MINUS_BTN_GPIO_Port, ELBOW_MINUS_BTN_Pin) == GPIO_PIN_RESET)
 80005fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000602:	4843      	ldr	r0, [pc, #268]	@ (8000710 <main+0x1e0>)
 8000604:	f000 ff44 	bl	8001490 <HAL_GPIO_ReadPin>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d108      	bne.n	8000620 <main+0xf0>
	  {
		  servo_set_pwm(&servos[CH2_ELBOW], servos[CH2_ELBOW].current_tick + 10);
 800060e:	4b3b      	ldr	r3, [pc, #236]	@ (80006fc <main+0x1cc>)
 8000610:	8b9b      	ldrh	r3, [r3, #28]
 8000612:	330a      	adds	r3, #10
 8000614:	b29b      	uxth	r3, r3
 8000616:	4619      	mov	r1, r3
 8000618:	483e      	ldr	r0, [pc, #248]	@ (8000714 <main+0x1e4>)
 800061a:	f003 ff53 	bl	80044c4 <servo_set_pwm>
 800061e:	e00f      	b.n	8000640 <main+0x110>
	  }
	  else if (HAL_GPIO_ReadPin(ELBOW_PLUS_BTN_GPIO_Port, ELBOW_PLUS_BTN_Pin) == GPIO_PIN_RESET)
 8000620:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000624:	483a      	ldr	r0, [pc, #232]	@ (8000710 <main+0x1e0>)
 8000626:	f000 ff33 	bl	8001490 <HAL_GPIO_ReadPin>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d107      	bne.n	8000640 <main+0x110>
	  {
		  servo_set_pwm(&servos[CH2_ELBOW], servos[CH2_ELBOW].current_tick - 10);
 8000630:	4b32      	ldr	r3, [pc, #200]	@ (80006fc <main+0x1cc>)
 8000632:	8b9b      	ldrh	r3, [r3, #28]
 8000634:	3b0a      	subs	r3, #10
 8000636:	b29b      	uxth	r3, r3
 8000638:	4619      	mov	r1, r3
 800063a:	4836      	ldr	r0, [pc, #216]	@ (8000714 <main+0x1e4>)
 800063c:	f003 ff42 	bl	80044c4 <servo_set_pwm>
	  }

	  //Shoulder rotation buttons
	  if (HAL_GPIO_ReadPin(SHOULDER_MINUS_BTN_GPIO_Port, SHOULDER_MINUS_BTN_Pin) == GPIO_PIN_RESET)
 8000640:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000644:	482f      	ldr	r0, [pc, #188]	@ (8000704 <main+0x1d4>)
 8000646:	f000 ff23 	bl	8001490 <HAL_GPIO_ReadPin>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d110      	bne.n	8000672 <main+0x142>
	  {
		  servo_set_pwm(&servos[CH1_RIGHT_SHOULDER], servos[CH1_RIGHT_SHOULDER].current_tick - 10);
 8000650:	4b2a      	ldr	r3, [pc, #168]	@ (80006fc <main+0x1cc>)
 8000652:	8a5b      	ldrh	r3, [r3, #18]
 8000654:	3b0a      	subs	r3, #10
 8000656:	b29b      	uxth	r3, r3
 8000658:	4619      	mov	r1, r3
 800065a:	482f      	ldr	r0, [pc, #188]	@ (8000718 <main+0x1e8>)
 800065c:	f003 ff32 	bl	80044c4 <servo_set_pwm>
		  servo_set_pwm(&servos[CH0_LEFT_SHOULDER], servos[CH0_LEFT_SHOULDER].current_tick + 10);
 8000660:	4b26      	ldr	r3, [pc, #152]	@ (80006fc <main+0x1cc>)
 8000662:	891b      	ldrh	r3, [r3, #8]
 8000664:	330a      	adds	r3, #10
 8000666:	b29b      	uxth	r3, r3
 8000668:	4619      	mov	r1, r3
 800066a:	4824      	ldr	r0, [pc, #144]	@ (80006fc <main+0x1cc>)
 800066c:	f003 ff2a 	bl	80044c4 <servo_set_pwm>
 8000670:	e017      	b.n	80006a2 <main+0x172>
	  }
	  else if (HAL_GPIO_ReadPin(SHOULDER_PLUS_BTN_GPIO_Port, SHOULDER_PLUS_BTN_Pin) == GPIO_PIN_RESET)
 8000672:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000676:	4823      	ldr	r0, [pc, #140]	@ (8000704 <main+0x1d4>)
 8000678:	f000 ff0a 	bl	8001490 <HAL_GPIO_ReadPin>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d10f      	bne.n	80006a2 <main+0x172>
	  {
		  servo_set_pwm(&servos[CH1_RIGHT_SHOULDER], servos[CH1_RIGHT_SHOULDER].current_tick + 10);
 8000682:	4b1e      	ldr	r3, [pc, #120]	@ (80006fc <main+0x1cc>)
 8000684:	8a5b      	ldrh	r3, [r3, #18]
 8000686:	330a      	adds	r3, #10
 8000688:	b29b      	uxth	r3, r3
 800068a:	4619      	mov	r1, r3
 800068c:	4822      	ldr	r0, [pc, #136]	@ (8000718 <main+0x1e8>)
 800068e:	f003 ff19 	bl	80044c4 <servo_set_pwm>
		  servo_set_pwm(&servos[CH0_LEFT_SHOULDER], servos[CH0_LEFT_SHOULDER].current_tick - 10);
 8000692:	4b1a      	ldr	r3, [pc, #104]	@ (80006fc <main+0x1cc>)
 8000694:	891b      	ldrh	r3, [r3, #8]
 8000696:	3b0a      	subs	r3, #10
 8000698:	b29b      	uxth	r3, r3
 800069a:	4619      	mov	r1, r3
 800069c:	4817      	ldr	r0, [pc, #92]	@ (80006fc <main+0x1cc>)
 800069e:	f003 ff11 	bl	80044c4 <servo_set_pwm>

	  }

	  //Base rotation buttons

	  if (HAL_GPIO_ReadPin(BASE_MINUS_BTN_GPIO_Port, BASE_MINUS_BTN_Pin) == GPIO_PIN_RESET)
 80006a2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006a6:	481a      	ldr	r0, [pc, #104]	@ (8000710 <main+0x1e0>)
 80006a8:	f000 fef2 	bl	8001490 <HAL_GPIO_ReadPin>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d10a      	bne.n	80006c8 <main+0x198>
	  {
		  HAL_GPIO_WritePin(DIR_PIN_GPIO_Port, DIR_PIN_Pin, GPIO_PIN_SET);
 80006b2:	2201      	movs	r2, #1
 80006b4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006b8:	480f      	ldr	r0, [pc, #60]	@ (80006f8 <main+0x1c8>)
 80006ba:	f000 ff01 	bl	80014c0 <HAL_GPIO_WritePin>
		  HAL_TIM_OC_Start_IT(&htim10, TIM_CHANNEL_1);
 80006be:	2100      	movs	r1, #0
 80006c0:	4816      	ldr	r0, [pc, #88]	@ (800071c <main+0x1ec>)
 80006c2:	f002 fe1b 	bl	80032fc <HAL_TIM_OC_Start_IT>
 80006c6:	e010      	b.n	80006ea <main+0x1ba>
	  }
	  else if (HAL_GPIO_ReadPin(BASE_PLUS_BTN_GPIO_Port, BASE_PLUS_BTN_Pin) == GPIO_PIN_RESET)
 80006c8:	2120      	movs	r1, #32
 80006ca:	480e      	ldr	r0, [pc, #56]	@ (8000704 <main+0x1d4>)
 80006cc:	f000 fee0 	bl	8001490 <HAL_GPIO_ReadPin>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d109      	bne.n	80006ea <main+0x1ba>
	  {
		  HAL_GPIO_WritePin(DIR_PIN_GPIO_Port, DIR_PIN_Pin, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006dc:	4806      	ldr	r0, [pc, #24]	@ (80006f8 <main+0x1c8>)
 80006de:	f000 feef 	bl	80014c0 <HAL_GPIO_WritePin>
		  HAL_TIM_OC_Start_IT(&htim10, TIM_CHANNEL_1);
 80006e2:	2100      	movs	r1, #0
 80006e4:	480d      	ldr	r0, [pc, #52]	@ (800071c <main+0x1ec>)
 80006e6:	f002 fe09 	bl	80032fc <HAL_TIM_OC_Start_IT>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(100);
 80006ea:	2064      	movs	r0, #100	@ 0x64
 80006ec:	f000 fc06 	bl	8000efc <HAL_Delay>
	  if (HAL_GPIO_ReadPin(GRIPPER_BTN_GPIO_Port, GRIPPER_BTN_Pin) == GPIO_PIN_RESET)
 80006f0:	e72f      	b.n	8000552 <main+0x22>
 80006f2:	bf00      	nop
 80006f4:	20000064 	.word	0x20000064
 80006f8:	40020800 	.word	0x40020800
 80006fc:	2000000c 	.word	0x2000000c
 8000700:	2000003e 	.word	0x2000003e
 8000704:	40020400 	.word	0x40020400
 8000708:	2000002a 	.word	0x2000002a
 800070c:	20000034 	.word	0x20000034
 8000710:	40020000 	.word	0x40020000
 8000714:	20000020 	.word	0x20000020
 8000718:	20000016 	.word	0x20000016
 800071c:	200000b8 	.word	0x200000b8

08000720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b094      	sub	sp, #80	@ 0x50
 8000724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	f107 031c 	add.w	r3, r7, #28
 800072a:	2234      	movs	r2, #52	@ 0x34
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f003 ffd8 	bl	80046e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	f107 0308 	add.w	r3, r7, #8
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000744:	2300      	movs	r3, #0
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	4b2c      	ldr	r3, [pc, #176]	@ (80007fc <SystemClock_Config+0xdc>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800074c:	4a2b      	ldr	r2, [pc, #172]	@ (80007fc <SystemClock_Config+0xdc>)
 800074e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000752:	6413      	str	r3, [r2, #64]	@ 0x40
 8000754:	4b29      	ldr	r3, [pc, #164]	@ (80007fc <SystemClock_Config+0xdc>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000758:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000760:	2300      	movs	r3, #0
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	4b26      	ldr	r3, [pc, #152]	@ (8000800 <SystemClock_Config+0xe0>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a25      	ldr	r2, [pc, #148]	@ (8000800 <SystemClock_Config+0xe0>)
 800076a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800076e:	6013      	str	r3, [r2, #0]
 8000770:	4b23      	ldr	r3, [pc, #140]	@ (8000800 <SystemClock_Config+0xe0>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800077c:	2302      	movs	r3, #2
 800077e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000780:	2301      	movs	r3, #1
 8000782:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000784:	2310      	movs	r3, #16
 8000786:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000788:	2302      	movs	r3, #2
 800078a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800078c:	2300      	movs	r3, #0
 800078e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000790:	2308      	movs	r3, #8
 8000792:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000794:	23b4      	movs	r3, #180	@ 0xb4
 8000796:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000798:	2302      	movs	r3, #2
 800079a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800079c:	2302      	movs	r3, #2
 800079e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a4:	f107 031c 	add.w	r3, r7, #28
 80007a8:	4618      	mov	r0, r3
 80007aa:	f002 fa61 	bl	8002c70 <HAL_RCC_OscConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007b4:	f000 f978 	bl	8000aa8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007b8:	f001 fec0 	bl	800253c <HAL_PWREx_EnableOverDrive>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007c2:	f000 f971 	bl	8000aa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c6:	230f      	movs	r3, #15
 80007c8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ca:	2302      	movs	r3, #2
 80007cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007d2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007dc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007de:	f107 0308 	add.w	r3, r7, #8
 80007e2:	2105      	movs	r1, #5
 80007e4:	4618      	mov	r0, r3
 80007e6:	f001 fef9 	bl	80025dc <HAL_RCC_ClockConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007f0:	f000 f95a 	bl	8000aa8 <Error_Handler>
  }
}
 80007f4:	bf00      	nop
 80007f6:	3750      	adds	r7, #80	@ 0x50
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40023800 	.word	0x40023800
 8000800:	40007000 	.word	0x40007000

08000804 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000808:	4b12      	ldr	r3, [pc, #72]	@ (8000854 <MX_I2C2_Init+0x50>)
 800080a:	4a13      	ldr	r2, [pc, #76]	@ (8000858 <MX_I2C2_Init+0x54>)
 800080c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800080e:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <MX_I2C2_Init+0x50>)
 8000810:	4a12      	ldr	r2, [pc, #72]	@ (800085c <MX_I2C2_Init+0x58>)
 8000812:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000814:	4b0f      	ldr	r3, [pc, #60]	@ (8000854 <MX_I2C2_Init+0x50>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800081a:	4b0e      	ldr	r3, [pc, #56]	@ (8000854 <MX_I2C2_Init+0x50>)
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000820:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <MX_I2C2_Init+0x50>)
 8000822:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000826:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000828:	4b0a      	ldr	r3, [pc, #40]	@ (8000854 <MX_I2C2_Init+0x50>)
 800082a:	2200      	movs	r2, #0
 800082c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800082e:	4b09      	ldr	r3, [pc, #36]	@ (8000854 <MX_I2C2_Init+0x50>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000834:	4b07      	ldr	r3, [pc, #28]	@ (8000854 <MX_I2C2_Init+0x50>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800083a:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <MX_I2C2_Init+0x50>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000840:	4804      	ldr	r0, [pc, #16]	@ (8000854 <MX_I2C2_Init+0x50>)
 8000842:	f000 fe57 	bl	80014f4 <HAL_I2C_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800084c:	f000 f92c 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000064 	.word	0x20000064
 8000858:	40005800 	.word	0x40005800
 800085c:	000186a0 	.word	0x000186a0

08000860 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b088      	sub	sp, #32
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
 8000874:	615a      	str	r2, [r3, #20]
 8000876:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000878:	4b1e      	ldr	r3, [pc, #120]	@ (80008f4 <MX_TIM10_Init+0x94>)
 800087a:	4a1f      	ldr	r2, [pc, #124]	@ (80008f8 <MX_TIM10_Init+0x98>)
 800087c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 180-1;
 800087e:	4b1d      	ldr	r3, [pc, #116]	@ (80008f4 <MX_TIM10_Init+0x94>)
 8000880:	22b3      	movs	r2, #179	@ 0xb3
 8000882:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000884:	4b1b      	ldr	r3, [pc, #108]	@ (80008f4 <MX_TIM10_Init+0x94>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 2000-1;
 800088a:	4b1a      	ldr	r3, [pc, #104]	@ (80008f4 <MX_TIM10_Init+0x94>)
 800088c:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000890:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000892:	4b18      	ldr	r3, [pc, #96]	@ (80008f4 <MX_TIM10_Init+0x94>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000898:	4b16      	ldr	r3, [pc, #88]	@ (80008f4 <MX_TIM10_Init+0x94>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800089e:	4815      	ldr	r0, [pc, #84]	@ (80008f4 <MX_TIM10_Init+0x94>)
 80008a0:	f002 fc84 	bl	80031ac <HAL_TIM_Base_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80008aa:	f000 f8fd 	bl	8000aa8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 80008ae:	4811      	ldr	r0, [pc, #68]	@ (80008f4 <MX_TIM10_Init+0x94>)
 80008b0:	f002 fccb 	bl	800324a <HAL_TIM_OC_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80008ba:	f000 f8f5 	bl	8000aa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80008be:	2330      	movs	r3, #48	@ 0x30
 80008c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	2200      	movs	r2, #0
 80008d2:	4619      	mov	r1, r3
 80008d4:	4807      	ldr	r0, [pc, #28]	@ (80008f4 <MX_TIM10_Init+0x94>)
 80008d6:	f002 ffd5 	bl	8003884 <HAL_TIM_OC_ConfigChannel>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80008e0:	f000 f8e2 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80008e4:	4803      	ldr	r0, [pc, #12]	@ (80008f4 <MX_TIM10_Init+0x94>)
 80008e6:	f000 f99f 	bl	8000c28 <HAL_TIM_MspPostInit>

}
 80008ea:	bf00      	nop
 80008ec:	3720      	adds	r7, #32
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	200000b8 	.word	0x200000b8
 80008f8:	40014400 	.word	0x40014400

080008fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000900:	4b11      	ldr	r3, [pc, #68]	@ (8000948 <MX_USART2_UART_Init+0x4c>)
 8000902:	4a12      	ldr	r2, [pc, #72]	@ (800094c <MX_USART2_UART_Init+0x50>)
 8000904:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000906:	4b10      	ldr	r3, [pc, #64]	@ (8000948 <MX_USART2_UART_Init+0x4c>)
 8000908:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800090c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800090e:	4b0e      	ldr	r3, [pc, #56]	@ (8000948 <MX_USART2_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000914:	4b0c      	ldr	r3, [pc, #48]	@ (8000948 <MX_USART2_UART_Init+0x4c>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800091a:	4b0b      	ldr	r3, [pc, #44]	@ (8000948 <MX_USART2_UART_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000920:	4b09      	ldr	r3, [pc, #36]	@ (8000948 <MX_USART2_UART_Init+0x4c>)
 8000922:	220c      	movs	r2, #12
 8000924:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000926:	4b08      	ldr	r3, [pc, #32]	@ (8000948 <MX_USART2_UART_Init+0x4c>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800092c:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <MX_USART2_UART_Init+0x4c>)
 800092e:	2200      	movs	r2, #0
 8000930:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000932:	4805      	ldr	r0, [pc, #20]	@ (8000948 <MX_USART2_UART_Init+0x4c>)
 8000934:	f003 fab9 	bl	8003eaa <HAL_UART_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800093e:	f000 f8b3 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000100 	.word	0x20000100
 800094c:	40004400 	.word	0x40004400

08000950 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	@ 0x28
 8000954:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
 8000964:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
 800096a:	4b4b      	ldr	r3, [pc, #300]	@ (8000a98 <MX_GPIO_Init+0x148>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	4a4a      	ldr	r2, [pc, #296]	@ (8000a98 <MX_GPIO_Init+0x148>)
 8000970:	f043 0304 	orr.w	r3, r3, #4
 8000974:	6313      	str	r3, [r2, #48]	@ 0x30
 8000976:	4b48      	ldr	r3, [pc, #288]	@ (8000a98 <MX_GPIO_Init+0x148>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	f003 0304 	and.w	r3, r3, #4
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	4b44      	ldr	r3, [pc, #272]	@ (8000a98 <MX_GPIO_Init+0x148>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	4a43      	ldr	r2, [pc, #268]	@ (8000a98 <MX_GPIO_Init+0x148>)
 800098c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000990:	6313      	str	r3, [r2, #48]	@ 0x30
 8000992:	4b41      	ldr	r3, [pc, #260]	@ (8000a98 <MX_GPIO_Init+0x148>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	4b3d      	ldr	r3, [pc, #244]	@ (8000a98 <MX_GPIO_Init+0x148>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	4a3c      	ldr	r2, [pc, #240]	@ (8000a98 <MX_GPIO_Init+0x148>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ae:	4b3a      	ldr	r3, [pc, #232]	@ (8000a98 <MX_GPIO_Init+0x148>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	4b36      	ldr	r3, [pc, #216]	@ (8000a98 <MX_GPIO_Init+0x148>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	4a35      	ldr	r2, [pc, #212]	@ (8000a98 <MX_GPIO_Init+0x148>)
 80009c4:	f043 0302 	orr.w	r3, r3, #2
 80009c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ca:	4b33      	ldr	r3, [pc, #204]	@ (8000a98 <MX_GPIO_Init+0x148>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	f003 0302 	and.w	r3, r3, #2
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2120      	movs	r1, #32
 80009da:	4830      	ldr	r0, [pc, #192]	@ (8000a9c <MX_GPIO_Init+0x14c>)
 80009dc:	f000 fd70 	bl	80014c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_PIN_GPIO_Port, DIR_PIN_Pin, GPIO_PIN_SET);
 80009e0:	2201      	movs	r2, #1
 80009e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009e6:	482e      	ldr	r0, [pc, #184]	@ (8000aa0 <MX_GPIO_Init+0x150>)
 80009e8:	f000 fd6a 	bl	80014c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009f2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4619      	mov	r1, r3
 8000a02:	4827      	ldr	r0, [pc, #156]	@ (8000aa0 <MX_GPIO_Init+0x150>)
 8000a04:	f000 fbb0 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a08:	2320      	movs	r3, #32
 8000a0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a14:	2300      	movs	r3, #0
 8000a16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	481f      	ldr	r0, [pc, #124]	@ (8000a9c <MX_GPIO_Init+0x14c>)
 8000a20:	f000 fba2 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pins : WRIST_PLUS_BTN_Pin WRIST_ROTATE_MINUS_BTN_Pin WRIST_ROTATE_PLUS_BTN_Pin GRIPPER_BTN_Pin */
  GPIO_InitStruct.Pin = WRIST_PLUS_BTN_Pin|WRIST_ROTATE_MINUS_BTN_Pin|WRIST_ROTATE_PLUS_BTN_Pin|GRIPPER_BTN_Pin;
 8000a24:	f44f 7358 	mov.w	r3, #864	@ 0x360
 8000a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	4619      	mov	r1, r3
 8000a38:	4819      	ldr	r0, [pc, #100]	@ (8000aa0 <MX_GPIO_Init+0x150>)
 8000a3a:	f000 fb95 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pins : SHOULDER_MINUS_BTN_Pin SHOULDER_PLUS_BTN_Pin BASE_PLUS_BTN_Pin WRIST_MINUS_BTN_Pin */
  GPIO_InitStruct.Pin = SHOULDER_MINUS_BTN_Pin|SHOULDER_PLUS_BTN_Pin|BASE_PLUS_BTN_Pin|WRIST_MINUS_BTN_Pin;
 8000a3e:	f249 2320 	movw	r3, #37408	@ 0x9220
 8000a42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	4619      	mov	r1, r3
 8000a52:	4814      	ldr	r0, [pc, #80]	@ (8000aa4 <MX_GPIO_Init+0x154>)
 8000a54:	f000 fb88 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pins : BASE_MINUS_BTN_Pin ELBOW_MINUS_BTN_Pin ELBOW_PLUS_BTN_Pin */
  GPIO_InitStruct.Pin = BASE_MINUS_BTN_Pin|ELBOW_MINUS_BTN_Pin|ELBOW_PLUS_BTN_Pin;
 8000a58:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000a5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	480b      	ldr	r0, [pc, #44]	@ (8000a9c <MX_GPIO_Init+0x14c>)
 8000a6e:	f000 fb7b 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_PIN_Pin */
  GPIO_InitStruct.Pin = DIR_PIN_Pin;
 8000a72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a80:	2303      	movs	r3, #3
 8000a82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_PIN_GPIO_Port, &GPIO_InitStruct);
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4805      	ldr	r0, [pc, #20]	@ (8000aa0 <MX_GPIO_Init+0x150>)
 8000a8c:	f000 fb6c 	bl	8001168 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a90:	bf00      	nop
 8000a92:	3728      	adds	r7, #40	@ 0x28
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40020000 	.word	0x40020000
 8000aa0:	40020800 	.word	0x40020800
 8000aa4:	40020400 	.word	0x40020400

08000aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aac:	b672      	cpsid	i
}
 8000aae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <Error_Handler+0x8>

08000ab4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	4b10      	ldr	r3, [pc, #64]	@ (8000b00 <HAL_MspInit+0x4c>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ac2:	4a0f      	ldr	r2, [pc, #60]	@ (8000b00 <HAL_MspInit+0x4c>)
 8000ac4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ac8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aca:	4b0d      	ldr	r3, [pc, #52]	@ (8000b00 <HAL_MspInit+0x4c>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ace:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	4b09      	ldr	r3, [pc, #36]	@ (8000b00 <HAL_MspInit+0x4c>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ade:	4a08      	ldr	r2, [pc, #32]	@ (8000b00 <HAL_MspInit+0x4c>)
 8000ae0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ae4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ae6:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <HAL_MspInit+0x4c>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000af2:	2007      	movs	r0, #7
 8000af4:	f000 faf6 	bl	80010e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40023800 	.word	0x40023800

08000b04 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	@ 0x28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a29      	ldr	r2, [pc, #164]	@ (8000bc8 <HAL_I2C_MspInit+0xc4>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d14b      	bne.n	8000bbe <HAL_I2C_MspInit+0xba>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	4b28      	ldr	r3, [pc, #160]	@ (8000bcc <HAL_I2C_MspInit+0xc8>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	4a27      	ldr	r2, [pc, #156]	@ (8000bcc <HAL_I2C_MspInit+0xc8>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b36:	4b25      	ldr	r3, [pc, #148]	@ (8000bcc <HAL_I2C_MspInit+0xc8>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	4b21      	ldr	r3, [pc, #132]	@ (8000bcc <HAL_I2C_MspInit+0xc8>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	4a20      	ldr	r2, [pc, #128]	@ (8000bcc <HAL_I2C_MspInit+0xc8>)
 8000b4c:	f043 0304 	orr.w	r3, r3, #4
 8000b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b52:	4b1e      	ldr	r3, [pc, #120]	@ (8000bcc <HAL_I2C_MspInit+0xc8>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	f003 0304 	and.w	r3, r3, #4
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PC12     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = PCA9685_I2C_SCL_Pin;
 8000b5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b64:	2312      	movs	r3, #18
 8000b66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000b70:	2304      	movs	r3, #4
 8000b72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PCA9685_I2C_SCL_GPIO_Port, &GPIO_InitStruct);
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4815      	ldr	r0, [pc, #84]	@ (8000bd0 <HAL_I2C_MspInit+0xcc>)
 8000b7c:	f000 faf4 	bl	8001168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PCA9685_I2C_SDA_Pin;
 8000b80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b86:	2312      	movs	r3, #18
 8000b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000b92:	2304      	movs	r3, #4
 8000b94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PCA9685_I2C_SDA_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	480d      	ldr	r0, [pc, #52]	@ (8000bd4 <HAL_I2C_MspInit+0xd0>)
 8000b9e:	f000 fae3 	bl	8001168 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	4b09      	ldr	r3, [pc, #36]	@ (8000bcc <HAL_I2C_MspInit+0xc8>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000baa:	4a08      	ldr	r2, [pc, #32]	@ (8000bcc <HAL_I2C_MspInit+0xc8>)
 8000bac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bb2:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <HAL_I2C_MspInit+0xc8>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000bbe:	bf00      	nop
 8000bc0:	3728      	adds	r7, #40	@ 0x28
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40005800 	.word	0x40005800
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40020400 	.word	0x40020400
 8000bd4:	40020800 	.word	0x40020800

08000bd8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a0e      	ldr	r2, [pc, #56]	@ (8000c20 <HAL_TIM_Base_MspInit+0x48>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d115      	bne.n	8000c16 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM10_MspInit 0 */

    /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	4b0d      	ldr	r3, [pc, #52]	@ (8000c24 <HAL_TIM_Base_MspInit+0x4c>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bf2:	4a0c      	ldr	r2, [pc, #48]	@ (8000c24 <HAL_TIM_Base_MspInit+0x4c>)
 8000bf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000c24 <HAL_TIM_Base_MspInit+0x4c>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2100      	movs	r1, #0
 8000c0a:	2019      	movs	r0, #25
 8000c0c:	f000 fa75 	bl	80010fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c10:	2019      	movs	r0, #25
 8000c12:	f000 fa8e 	bl	8001132 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM10_MspInit 1 */

  }

}
 8000c16:	bf00      	nop
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40014400 	.word	0x40014400
 8000c24:	40023800 	.word	0x40023800

08000c28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 030c 	add.w	r3, r7, #12
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM10)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a12      	ldr	r2, [pc, #72]	@ (8000c90 <HAL_TIM_MspPostInit+0x68>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d11e      	bne.n	8000c88 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM10_MspPostInit 0 */

    /* USER CODE END TIM10_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	4b11      	ldr	r3, [pc, #68]	@ (8000c94 <HAL_TIM_MspPostInit+0x6c>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c52:	4a10      	ldr	r2, [pc, #64]	@ (8000c94 <HAL_TIM_MspPostInit+0x6c>)
 8000c54:	f043 0302 	orr.w	r3, r3, #2
 8000c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c94 <HAL_TIM_MspPostInit+0x6c>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	68bb      	ldr	r3, [r7, #8]
    /**TIM10 GPIO Configuration
    PB8     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = TIM10_STEP_PIN_Pin;
 8000c66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c6a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c74:	2303      	movs	r3, #3
 8000c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM10_STEP_PIN_GPIO_Port, &GPIO_InitStruct);
 8000c7c:	f107 030c 	add.w	r3, r7, #12
 8000c80:	4619      	mov	r1, r3
 8000c82:	4805      	ldr	r0, [pc, #20]	@ (8000c98 <HAL_TIM_MspPostInit+0x70>)
 8000c84:	f000 fa70 	bl	8001168 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM10_MspPostInit 1 */

    /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8000c88:	bf00      	nop
 8000c8a:	3720      	adds	r7, #32
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40014400 	.word	0x40014400
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020400 	.word	0x40020400

08000c9c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	@ 0x28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a19      	ldr	r2, [pc, #100]	@ (8000d20 <HAL_UART_MspInit+0x84>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d12b      	bne.n	8000d16 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	4b18      	ldr	r3, [pc, #96]	@ (8000d24 <HAL_UART_MspInit+0x88>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc6:	4a17      	ldr	r2, [pc, #92]	@ (8000d24 <HAL_UART_MspInit+0x88>)
 8000cc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ccc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cce:	4b15      	ldr	r3, [pc, #84]	@ (8000d24 <HAL_UART_MspInit+0x88>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	4b11      	ldr	r3, [pc, #68]	@ (8000d24 <HAL_UART_MspInit+0x88>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	4a10      	ldr	r2, [pc, #64]	@ (8000d24 <HAL_UART_MspInit+0x88>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cea:	4b0e      	ldr	r3, [pc, #56]	@ (8000d24 <HAL_UART_MspInit+0x88>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cf6:	230c      	movs	r3, #12
 8000cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d02:	2303      	movs	r3, #3
 8000d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d06:	2307      	movs	r3, #7
 8000d08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4805      	ldr	r0, [pc, #20]	@ (8000d28 <HAL_UART_MspInit+0x8c>)
 8000d12:	f000 fa29 	bl	8001168 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d16:	bf00      	nop
 8000d18:	3728      	adds	r7, #40	@ 0x28
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40004400 	.word	0x40004400
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40020000 	.word	0x40020000

08000d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <NMI_Handler+0x4>

08000d34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <HardFault_Handler+0x4>

08000d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <MemManage_Handler+0x4>

08000d44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <BusFault_Handler+0x4>

08000d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <UsageFault_Handler+0x4>

08000d54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d82:	f000 f89b 	bl	8000ebc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000d90:	4802      	ldr	r0, [pc, #8]	@ (8000d9c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d92:	f002 fc87 	bl	80036a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	200000b8 	.word	0x200000b8

08000da0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da4:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <SystemInit+0x20>)
 8000da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000daa:	4a05      	ldr	r2, [pc, #20]	@ (8000dc0 <SystemInit+0x20>)
 8000dac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000db0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dfc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000dc8:	f7ff ffea 	bl	8000da0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dcc:	480c      	ldr	r0, [pc, #48]	@ (8000e00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dce:	490d      	ldr	r1, [pc, #52]	@ (8000e04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000e08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd4:	e002      	b.n	8000ddc <LoopCopyDataInit>

08000dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dda:	3304      	adds	r3, #4

08000ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de0:	d3f9      	bcc.n	8000dd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de2:	4a0a      	ldr	r2, [pc, #40]	@ (8000e0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000de4:	4c0a      	ldr	r4, [pc, #40]	@ (8000e10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de8:	e001      	b.n	8000dee <LoopFillZerobss>

08000dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dec:	3204      	adds	r2, #4

08000dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df0:	d3fb      	bcc.n	8000dea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000df2:	f003 fc7f 	bl	80046f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000df6:	f7ff fb9b 	bl	8000530 <main>
  bx  lr    
 8000dfa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e04:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8000e08:	08004794 	.word	0x08004794
  ldr r2, =_sbss
 8000e0c:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8000e10:	20000154 	.word	0x20000154

08000e14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e14:	e7fe      	b.n	8000e14 <ADC_IRQHandler>
	...

08000e18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e58 <HAL_Init+0x40>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a0d      	ldr	r2, [pc, #52]	@ (8000e58 <HAL_Init+0x40>)
 8000e22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e28:	4b0b      	ldr	r3, [pc, #44]	@ (8000e58 <HAL_Init+0x40>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a0a      	ldr	r2, [pc, #40]	@ (8000e58 <HAL_Init+0x40>)
 8000e2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e34:	4b08      	ldr	r3, [pc, #32]	@ (8000e58 <HAL_Init+0x40>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a07      	ldr	r2, [pc, #28]	@ (8000e58 <HAL_Init+0x40>)
 8000e3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e40:	2003      	movs	r0, #3
 8000e42:	f000 f94f 	bl	80010e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e46:	2000      	movs	r0, #0
 8000e48:	f000 f808 	bl	8000e5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e4c:	f7ff fe32 	bl	8000ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40023c00 	.word	0x40023c00

08000e5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e64:	4b12      	ldr	r3, [pc, #72]	@ (8000eb0 <HAL_InitTick+0x54>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	4b12      	ldr	r3, [pc, #72]	@ (8000eb4 <HAL_InitTick+0x58>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f000 f967 	bl	800114e <HAL_SYSTICK_Config>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e00e      	b.n	8000ea8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2b0f      	cmp	r3, #15
 8000e8e:	d80a      	bhi.n	8000ea6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e90:	2200      	movs	r2, #0
 8000e92:	6879      	ldr	r1, [r7, #4]
 8000e94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e98:	f000 f92f 	bl	80010fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e9c:	4a06      	ldr	r2, [pc, #24]	@ (8000eb8 <HAL_InitTick+0x5c>)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	e000      	b.n	8000ea8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000000 	.word	0x20000000
 8000eb4:	20000008 	.word	0x20000008
 8000eb8:	20000004 	.word	0x20000004

08000ebc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <HAL_IncTick+0x20>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <HAL_IncTick+0x24>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4413      	add	r3, r2
 8000ecc:	4a04      	ldr	r2, [pc, #16]	@ (8000ee0 <HAL_IncTick+0x24>)
 8000ece:	6013      	str	r3, [r2, #0]
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	20000008 	.word	0x20000008
 8000ee0:	20000148 	.word	0x20000148

08000ee4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee8:	4b03      	ldr	r3, [pc, #12]	@ (8000ef8 <HAL_GetTick+0x14>)
 8000eea:	681b      	ldr	r3, [r3, #0]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000148 	.word	0x20000148

08000efc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f04:	f7ff ffee 	bl	8000ee4 <HAL_GetTick>
 8000f08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f14:	d005      	beq.n	8000f22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f16:	4b0a      	ldr	r3, [pc, #40]	@ (8000f40 <HAL_Delay+0x44>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4413      	add	r3, r2
 8000f20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f22:	bf00      	nop
 8000f24:	f7ff ffde 	bl	8000ee4 <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d8f7      	bhi.n	8000f24 <HAL_Delay+0x28>
  {
  }
}
 8000f34:	bf00      	nop
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000008 	.word	0x20000008

08000f44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f54:	4b0c      	ldr	r3, [pc, #48]	@ (8000f88 <__NVIC_SetPriorityGrouping+0x44>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f5a:	68ba      	ldr	r2, [r7, #8]
 8000f5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f60:	4013      	ands	r3, r2
 8000f62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f76:	4a04      	ldr	r2, [pc, #16]	@ (8000f88 <__NVIC_SetPriorityGrouping+0x44>)
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	60d3      	str	r3, [r2, #12]
}
 8000f7c:	bf00      	nop
 8000f7e:	3714      	adds	r7, #20
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f90:	4b04      	ldr	r3, [pc, #16]	@ (8000fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	0a1b      	lsrs	r3, r3, #8
 8000f96:	f003 0307 	and.w	r3, r3, #7
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	db0b      	blt.n	8000fd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	f003 021f 	and.w	r2, r3, #31
 8000fc0:	4907      	ldr	r1, [pc, #28]	@ (8000fe0 <__NVIC_EnableIRQ+0x38>)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	095b      	lsrs	r3, r3, #5
 8000fc8:	2001      	movs	r0, #1
 8000fca:	fa00 f202 	lsl.w	r2, r0, r2
 8000fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000e100 	.word	0xe000e100

08000fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	6039      	str	r1, [r7, #0]
 8000fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	db0a      	blt.n	800100e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	490c      	ldr	r1, [pc, #48]	@ (8001030 <__NVIC_SetPriority+0x4c>)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	0112      	lsls	r2, r2, #4
 8001004:	b2d2      	uxtb	r2, r2
 8001006:	440b      	add	r3, r1
 8001008:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800100c:	e00a      	b.n	8001024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	b2da      	uxtb	r2, r3
 8001012:	4908      	ldr	r1, [pc, #32]	@ (8001034 <__NVIC_SetPriority+0x50>)
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	f003 030f 	and.w	r3, r3, #15
 800101a:	3b04      	subs	r3, #4
 800101c:	0112      	lsls	r2, r2, #4
 800101e:	b2d2      	uxtb	r2, r2
 8001020:	440b      	add	r3, r1
 8001022:	761a      	strb	r2, [r3, #24]
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000e100 	.word	0xe000e100
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001038:	b480      	push	{r7}
 800103a:	b089      	sub	sp, #36	@ 0x24
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	f1c3 0307 	rsb	r3, r3, #7
 8001052:	2b04      	cmp	r3, #4
 8001054:	bf28      	it	cs
 8001056:	2304      	movcs	r3, #4
 8001058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3304      	adds	r3, #4
 800105e:	2b06      	cmp	r3, #6
 8001060:	d902      	bls.n	8001068 <NVIC_EncodePriority+0x30>
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3b03      	subs	r3, #3
 8001066:	e000      	b.n	800106a <NVIC_EncodePriority+0x32>
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800106c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43da      	mvns	r2, r3
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	401a      	ands	r2, r3
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001080:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	fa01 f303 	lsl.w	r3, r1, r3
 800108a:	43d9      	mvns	r1, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001090:	4313      	orrs	r3, r2
         );
}
 8001092:	4618      	mov	r0, r3
 8001094:	3724      	adds	r7, #36	@ 0x24
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
	...

080010a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010b0:	d301      	bcc.n	80010b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010b2:	2301      	movs	r3, #1
 80010b4:	e00f      	b.n	80010d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010b6:	4a0a      	ldr	r2, [pc, #40]	@ (80010e0 <SysTick_Config+0x40>)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010be:	210f      	movs	r1, #15
 80010c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010c4:	f7ff ff8e 	bl	8000fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c8:	4b05      	ldr	r3, [pc, #20]	@ (80010e0 <SysTick_Config+0x40>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ce:	4b04      	ldr	r3, [pc, #16]	@ (80010e0 <SysTick_Config+0x40>)
 80010d0:	2207      	movs	r2, #7
 80010d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	e000e010 	.word	0xe000e010

080010e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff ff29 	bl	8000f44 <__NVIC_SetPriorityGrouping>
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b086      	sub	sp, #24
 80010fe:	af00      	add	r7, sp, #0
 8001100:	4603      	mov	r3, r0
 8001102:	60b9      	str	r1, [r7, #8]
 8001104:	607a      	str	r2, [r7, #4]
 8001106:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800110c:	f7ff ff3e 	bl	8000f8c <__NVIC_GetPriorityGrouping>
 8001110:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	68b9      	ldr	r1, [r7, #8]
 8001116:	6978      	ldr	r0, [r7, #20]
 8001118:	f7ff ff8e 	bl	8001038 <NVIC_EncodePriority>
 800111c:	4602      	mov	r2, r0
 800111e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001122:	4611      	mov	r1, r2
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff5d 	bl	8000fe4 <__NVIC_SetPriority>
}
 800112a:	bf00      	nop
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	4603      	mov	r3, r0
 800113a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800113c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff31 	bl	8000fa8 <__NVIC_EnableIRQ>
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff ffa2 	bl	80010a0 <SysTick_Config>
 800115c:	4603      	mov	r3, r0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001168:	b480      	push	{r7}
 800116a:	b089      	sub	sp, #36	@ 0x24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800117a:	2300      	movs	r3, #0
 800117c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
 8001182:	e165      	b.n	8001450 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001184:	2201      	movs	r2, #1
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	697a      	ldr	r2, [r7, #20]
 8001194:	4013      	ands	r3, r2
 8001196:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	429a      	cmp	r2, r3
 800119e:	f040 8154 	bne.w	800144a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 0303 	and.w	r3, r3, #3
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d005      	beq.n	80011ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d130      	bne.n	800121c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	2203      	movs	r2, #3
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4013      	ands	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	68da      	ldr	r2, [r3, #12]
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011f0:	2201      	movs	r2, #1
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	091b      	lsrs	r3, r3, #4
 8001206:	f003 0201 	and.w	r2, r3, #1
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	2b03      	cmp	r3, #3
 8001226:	d017      	beq.n	8001258 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	2203      	movs	r2, #3
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 0303 	and.w	r3, r3, #3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d123      	bne.n	80012ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	08da      	lsrs	r2, r3, #3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3208      	adds	r2, #8
 800126c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001270:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	f003 0307 	and.w	r3, r3, #7
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	220f      	movs	r2, #15
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	691a      	ldr	r2, [r3, #16]
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	08da      	lsrs	r2, r3, #3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3208      	adds	r2, #8
 80012a6:	69b9      	ldr	r1, [r7, #24]
 80012a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	2203      	movs	r2, #3
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4013      	ands	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 0203 	and.w	r2, r3, #3
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f000 80ae 	beq.w	800144a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	4b5d      	ldr	r3, [pc, #372]	@ (8001468 <HAL_GPIO_Init+0x300>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f6:	4a5c      	ldr	r2, [pc, #368]	@ (8001468 <HAL_GPIO_Init+0x300>)
 80012f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80012fe:	4b5a      	ldr	r3, [pc, #360]	@ (8001468 <HAL_GPIO_Init+0x300>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001302:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800130a:	4a58      	ldr	r2, [pc, #352]	@ (800146c <HAL_GPIO_Init+0x304>)
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	089b      	lsrs	r3, r3, #2
 8001310:	3302      	adds	r3, #2
 8001312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001316:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	220f      	movs	r2, #15
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4013      	ands	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a4f      	ldr	r2, [pc, #316]	@ (8001470 <HAL_GPIO_Init+0x308>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d025      	beq.n	8001382 <HAL_GPIO_Init+0x21a>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a4e      	ldr	r2, [pc, #312]	@ (8001474 <HAL_GPIO_Init+0x30c>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d01f      	beq.n	800137e <HAL_GPIO_Init+0x216>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a4d      	ldr	r2, [pc, #308]	@ (8001478 <HAL_GPIO_Init+0x310>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d019      	beq.n	800137a <HAL_GPIO_Init+0x212>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a4c      	ldr	r2, [pc, #304]	@ (800147c <HAL_GPIO_Init+0x314>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d013      	beq.n	8001376 <HAL_GPIO_Init+0x20e>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a4b      	ldr	r2, [pc, #300]	@ (8001480 <HAL_GPIO_Init+0x318>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d00d      	beq.n	8001372 <HAL_GPIO_Init+0x20a>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a4a      	ldr	r2, [pc, #296]	@ (8001484 <HAL_GPIO_Init+0x31c>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d007      	beq.n	800136e <HAL_GPIO_Init+0x206>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a49      	ldr	r2, [pc, #292]	@ (8001488 <HAL_GPIO_Init+0x320>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d101      	bne.n	800136a <HAL_GPIO_Init+0x202>
 8001366:	2306      	movs	r3, #6
 8001368:	e00c      	b.n	8001384 <HAL_GPIO_Init+0x21c>
 800136a:	2307      	movs	r3, #7
 800136c:	e00a      	b.n	8001384 <HAL_GPIO_Init+0x21c>
 800136e:	2305      	movs	r3, #5
 8001370:	e008      	b.n	8001384 <HAL_GPIO_Init+0x21c>
 8001372:	2304      	movs	r3, #4
 8001374:	e006      	b.n	8001384 <HAL_GPIO_Init+0x21c>
 8001376:	2303      	movs	r3, #3
 8001378:	e004      	b.n	8001384 <HAL_GPIO_Init+0x21c>
 800137a:	2302      	movs	r3, #2
 800137c:	e002      	b.n	8001384 <HAL_GPIO_Init+0x21c>
 800137e:	2301      	movs	r3, #1
 8001380:	e000      	b.n	8001384 <HAL_GPIO_Init+0x21c>
 8001382:	2300      	movs	r3, #0
 8001384:	69fa      	ldr	r2, [r7, #28]
 8001386:	f002 0203 	and.w	r2, r2, #3
 800138a:	0092      	lsls	r2, r2, #2
 800138c:	4093      	lsls	r3, r2
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4313      	orrs	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001394:	4935      	ldr	r1, [pc, #212]	@ (800146c <HAL_GPIO_Init+0x304>)
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	089b      	lsrs	r3, r3, #2
 800139a:	3302      	adds	r3, #2
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013a2:	4b3a      	ldr	r3, [pc, #232]	@ (800148c <HAL_GPIO_Init+0x324>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	43db      	mvns	r3, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4013      	ands	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013c6:	4a31      	ldr	r2, [pc, #196]	@ (800148c <HAL_GPIO_Init+0x324>)
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013cc:	4b2f      	ldr	r3, [pc, #188]	@ (800148c <HAL_GPIO_Init+0x324>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013f0:	4a26      	ldr	r2, [pc, #152]	@ (800148c <HAL_GPIO_Init+0x324>)
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013f6:	4b25      	ldr	r3, [pc, #148]	@ (800148c <HAL_GPIO_Init+0x324>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	43db      	mvns	r3, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4013      	ands	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800141a:	4a1c      	ldr	r2, [pc, #112]	@ (800148c <HAL_GPIO_Init+0x324>)
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001420:	4b1a      	ldr	r3, [pc, #104]	@ (800148c <HAL_GPIO_Init+0x324>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001444:	4a11      	ldr	r2, [pc, #68]	@ (800148c <HAL_GPIO_Init+0x324>)
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3301      	adds	r3, #1
 800144e:	61fb      	str	r3, [r7, #28]
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	2b0f      	cmp	r3, #15
 8001454:	f67f ae96 	bls.w	8001184 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001458:	bf00      	nop
 800145a:	bf00      	nop
 800145c:	3724      	adds	r7, #36	@ 0x24
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	40023800 	.word	0x40023800
 800146c:	40013800 	.word	0x40013800
 8001470:	40020000 	.word	0x40020000
 8001474:	40020400 	.word	0x40020400
 8001478:	40020800 	.word	0x40020800
 800147c:	40020c00 	.word	0x40020c00
 8001480:	40021000 	.word	0x40021000
 8001484:	40021400 	.word	0x40021400
 8001488:	40021800 	.word	0x40021800
 800148c:	40013c00 	.word	0x40013c00

08001490 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	691a      	ldr	r2, [r3, #16]
 80014a0:	887b      	ldrh	r3, [r7, #2]
 80014a2:	4013      	ands	r3, r2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d002      	beq.n	80014ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014a8:	2301      	movs	r3, #1
 80014aa:	73fb      	strb	r3, [r7, #15]
 80014ac:	e001      	b.n	80014b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014ae:	2300      	movs	r3, #0
 80014b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	807b      	strh	r3, [r7, #2]
 80014cc:	4613      	mov	r3, r2
 80014ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014d0:	787b      	ldrb	r3, [r7, #1]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014d6:	887a      	ldrh	r2, [r7, #2]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014dc:	e003      	b.n	80014e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014de:	887b      	ldrh	r3, [r7, #2]
 80014e0:	041a      	lsls	r2, r3, #16
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	619a      	str	r2, [r3, #24]
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
	...

080014f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d101      	bne.n	8001506 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e12b      	b.n	800175e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	d106      	bne.n	8001520 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff faf2 	bl	8000b04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2224      	movs	r2, #36	@ 0x24
 8001524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 0201 	bic.w	r2, r2, #1
 8001536:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001546:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001556:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001558:	f001 f932 	bl	80027c0 <HAL_RCC_GetPCLK1Freq>
 800155c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	4a81      	ldr	r2, [pc, #516]	@ (8001768 <HAL_I2C_Init+0x274>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d807      	bhi.n	8001578 <HAL_I2C_Init+0x84>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4a80      	ldr	r2, [pc, #512]	@ (800176c <HAL_I2C_Init+0x278>)
 800156c:	4293      	cmp	r3, r2
 800156e:	bf94      	ite	ls
 8001570:	2301      	movls	r3, #1
 8001572:	2300      	movhi	r3, #0
 8001574:	b2db      	uxtb	r3, r3
 8001576:	e006      	b.n	8001586 <HAL_I2C_Init+0x92>
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4a7d      	ldr	r2, [pc, #500]	@ (8001770 <HAL_I2C_Init+0x27c>)
 800157c:	4293      	cmp	r3, r2
 800157e:	bf94      	ite	ls
 8001580:	2301      	movls	r3, #1
 8001582:	2300      	movhi	r3, #0
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e0e7      	b.n	800175e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	4a78      	ldr	r2, [pc, #480]	@ (8001774 <HAL_I2C_Init+0x280>)
 8001592:	fba2 2303 	umull	r2, r3, r2, r3
 8001596:	0c9b      	lsrs	r3, r3, #18
 8001598:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	68ba      	ldr	r2, [r7, #8]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	4a6a      	ldr	r2, [pc, #424]	@ (8001768 <HAL_I2C_Init+0x274>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d802      	bhi.n	80015c8 <HAL_I2C_Init+0xd4>
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	3301      	adds	r3, #1
 80015c6:	e009      	b.n	80015dc <HAL_I2C_Init+0xe8>
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80015ce:	fb02 f303 	mul.w	r3, r2, r3
 80015d2:	4a69      	ldr	r2, [pc, #420]	@ (8001778 <HAL_I2C_Init+0x284>)
 80015d4:	fba2 2303 	umull	r2, r3, r2, r3
 80015d8:	099b      	lsrs	r3, r3, #6
 80015da:	3301      	adds	r3, #1
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	6812      	ldr	r2, [r2, #0]
 80015e0:	430b      	orrs	r3, r1
 80015e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	69db      	ldr	r3, [r3, #28]
 80015ea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80015ee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	495c      	ldr	r1, [pc, #368]	@ (8001768 <HAL_I2C_Init+0x274>)
 80015f8:	428b      	cmp	r3, r1
 80015fa:	d819      	bhi.n	8001630 <HAL_I2C_Init+0x13c>
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	1e59      	subs	r1, r3, #1
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	fbb1 f3f3 	udiv	r3, r1, r3
 800160a:	1c59      	adds	r1, r3, #1
 800160c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001610:	400b      	ands	r3, r1
 8001612:	2b00      	cmp	r3, #0
 8001614:	d00a      	beq.n	800162c <HAL_I2C_Init+0x138>
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	1e59      	subs	r1, r3, #1
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	fbb1 f3f3 	udiv	r3, r1, r3
 8001624:	3301      	adds	r3, #1
 8001626:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800162a:	e051      	b.n	80016d0 <HAL_I2C_Init+0x1dc>
 800162c:	2304      	movs	r3, #4
 800162e:	e04f      	b.n	80016d0 <HAL_I2C_Init+0x1dc>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d111      	bne.n	800165c <HAL_I2C_Init+0x168>
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	1e58      	subs	r0, r3, #1
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6859      	ldr	r1, [r3, #4]
 8001640:	460b      	mov	r3, r1
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	440b      	add	r3, r1
 8001646:	fbb0 f3f3 	udiv	r3, r0, r3
 800164a:	3301      	adds	r3, #1
 800164c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001650:	2b00      	cmp	r3, #0
 8001652:	bf0c      	ite	eq
 8001654:	2301      	moveq	r3, #1
 8001656:	2300      	movne	r3, #0
 8001658:	b2db      	uxtb	r3, r3
 800165a:	e012      	b.n	8001682 <HAL_I2C_Init+0x18e>
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	1e58      	subs	r0, r3, #1
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6859      	ldr	r1, [r3, #4]
 8001664:	460b      	mov	r3, r1
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	440b      	add	r3, r1
 800166a:	0099      	lsls	r1, r3, #2
 800166c:	440b      	add	r3, r1
 800166e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001672:	3301      	adds	r3, #1
 8001674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001678:	2b00      	cmp	r3, #0
 800167a:	bf0c      	ite	eq
 800167c:	2301      	moveq	r3, #1
 800167e:	2300      	movne	r3, #0
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_I2C_Init+0x196>
 8001686:	2301      	movs	r3, #1
 8001688:	e022      	b.n	80016d0 <HAL_I2C_Init+0x1dc>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d10e      	bne.n	80016b0 <HAL_I2C_Init+0x1bc>
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	1e58      	subs	r0, r3, #1
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6859      	ldr	r1, [r3, #4]
 800169a:	460b      	mov	r3, r1
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	440b      	add	r3, r1
 80016a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80016a4:	3301      	adds	r3, #1
 80016a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016ae:	e00f      	b.n	80016d0 <HAL_I2C_Init+0x1dc>
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	1e58      	subs	r0, r3, #1
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6859      	ldr	r1, [r3, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	440b      	add	r3, r1
 80016be:	0099      	lsls	r1, r3, #2
 80016c0:	440b      	add	r3, r1
 80016c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80016c6:	3301      	adds	r3, #1
 80016c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	6809      	ldr	r1, [r1, #0]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	69da      	ldr	r2, [r3, #28]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	431a      	orrs	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	430a      	orrs	r2, r1
 80016f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80016fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	6911      	ldr	r1, [r2, #16]
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	68d2      	ldr	r2, [r2, #12]
 800170a:	4311      	orrs	r1, r2
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	6812      	ldr	r2, [r2, #0]
 8001710:	430b      	orrs	r3, r1
 8001712:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	695a      	ldr	r2, [r3, #20]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	431a      	orrs	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	430a      	orrs	r2, r1
 800172e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f042 0201 	orr.w	r2, r2, #1
 800173e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2220      	movs	r2, #32
 800174a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	000186a0 	.word	0x000186a0
 800176c:	001e847f 	.word	0x001e847f
 8001770:	003d08ff 	.word	0x003d08ff
 8001774:	431bde83 	.word	0x431bde83
 8001778:	10624dd3 	.word	0x10624dd3

0800177c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b088      	sub	sp, #32
 8001780:	af02      	add	r7, sp, #8
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	4608      	mov	r0, r1
 8001786:	4611      	mov	r1, r2
 8001788:	461a      	mov	r2, r3
 800178a:	4603      	mov	r3, r0
 800178c:	817b      	strh	r3, [r7, #10]
 800178e:	460b      	mov	r3, r1
 8001790:	813b      	strh	r3, [r7, #8]
 8001792:	4613      	mov	r3, r2
 8001794:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001796:	f7ff fba5 	bl	8000ee4 <HAL_GetTick>
 800179a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b20      	cmp	r3, #32
 80017a6:	f040 80d9 	bne.w	800195c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	2319      	movs	r3, #25
 80017b0:	2201      	movs	r2, #1
 80017b2:	496d      	ldr	r1, [pc, #436]	@ (8001968 <HAL_I2C_Mem_Write+0x1ec>)
 80017b4:	68f8      	ldr	r0, [r7, #12]
 80017b6:	f000 fc8b 	bl	80020d0 <I2C_WaitOnFlagUntilTimeout>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80017c0:	2302      	movs	r3, #2
 80017c2:	e0cc      	b.n	800195e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d101      	bne.n	80017d2 <HAL_I2C_Mem_Write+0x56>
 80017ce:	2302      	movs	r3, #2
 80017d0:	e0c5      	b.n	800195e <HAL_I2C_Mem_Write+0x1e2>
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2201      	movs	r2, #1
 80017d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d007      	beq.n	80017f8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f042 0201 	orr.w	r2, r2, #1
 80017f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001806:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2221      	movs	r2, #33	@ 0x21
 800180c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2240      	movs	r2, #64	@ 0x40
 8001814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2200      	movs	r2, #0
 800181c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6a3a      	ldr	r2, [r7, #32]
 8001822:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001828:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800182e:	b29a      	uxth	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4a4d      	ldr	r2, [pc, #308]	@ (800196c <HAL_I2C_Mem_Write+0x1f0>)
 8001838:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800183a:	88f8      	ldrh	r0, [r7, #6]
 800183c:	893a      	ldrh	r2, [r7, #8]
 800183e:	8979      	ldrh	r1, [r7, #10]
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	9301      	str	r3, [sp, #4]
 8001844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	4603      	mov	r3, r0
 800184a:	68f8      	ldr	r0, [r7, #12]
 800184c:	f000 fac2 	bl	8001dd4 <I2C_RequestMemoryWrite>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d052      	beq.n	80018fc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e081      	b.n	800195e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800185e:	68f8      	ldr	r0, [r7, #12]
 8001860:	f000 fd50 	bl	8002304 <I2C_WaitOnTXEFlagUntilTimeout>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00d      	beq.n	8001886 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186e:	2b04      	cmp	r3, #4
 8001870:	d107      	bne.n	8001882 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001880:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e06b      	b.n	800195e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800188a:	781a      	ldrb	r2, [r3, #0]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001896:	1c5a      	adds	r2, r3, #1
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018a0:	3b01      	subs	r3, #1
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	3b01      	subs	r3, #1
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	695b      	ldr	r3, [r3, #20]
 80018bc:	f003 0304 	and.w	r3, r3, #4
 80018c0:	2b04      	cmp	r3, #4
 80018c2:	d11b      	bne.n	80018fc <HAL_I2C_Mem_Write+0x180>
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d017      	beq.n	80018fc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d0:	781a      	ldrb	r2, [r3, #0]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018dc:	1c5a      	adds	r2, r3, #1
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018e6:	3b01      	subs	r3, #1
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	3b01      	subs	r3, #1
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1aa      	bne.n	800185a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001908:	68f8      	ldr	r0, [r7, #12]
 800190a:	f000 fd43 	bl	8002394 <I2C_WaitOnBTFFlagUntilTimeout>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00d      	beq.n	8001930 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001918:	2b04      	cmp	r3, #4
 800191a:	d107      	bne.n	800192c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800192a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e016      	b.n	800195e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800193e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2220      	movs	r2, #32
 8001944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001958:	2300      	movs	r3, #0
 800195a:	e000      	b.n	800195e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800195c:	2302      	movs	r3, #2
  }
}
 800195e:	4618      	mov	r0, r3
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	00100002 	.word	0x00100002
 800196c:	ffff0000 	.word	0xffff0000

08001970 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b08c      	sub	sp, #48	@ 0x30
 8001974:	af02      	add	r7, sp, #8
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	4608      	mov	r0, r1
 800197a:	4611      	mov	r1, r2
 800197c:	461a      	mov	r2, r3
 800197e:	4603      	mov	r3, r0
 8001980:	817b      	strh	r3, [r7, #10]
 8001982:	460b      	mov	r3, r1
 8001984:	813b      	strh	r3, [r7, #8]
 8001986:	4613      	mov	r3, r2
 8001988:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800198a:	f7ff faab 	bl	8000ee4 <HAL_GetTick>
 800198e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001996:	b2db      	uxtb	r3, r3
 8001998:	2b20      	cmp	r3, #32
 800199a:	f040 8214 	bne.w	8001dc6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800199e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a0:	9300      	str	r3, [sp, #0]
 80019a2:	2319      	movs	r3, #25
 80019a4:	2201      	movs	r2, #1
 80019a6:	497b      	ldr	r1, [pc, #492]	@ (8001b94 <HAL_I2C_Mem_Read+0x224>)
 80019a8:	68f8      	ldr	r0, [r7, #12]
 80019aa:	f000 fb91 	bl	80020d0 <I2C_WaitOnFlagUntilTimeout>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80019b4:	2302      	movs	r3, #2
 80019b6:	e207      	b.n	8001dc8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d101      	bne.n	80019c6 <HAL_I2C_Mem_Read+0x56>
 80019c2:	2302      	movs	r3, #2
 80019c4:	e200      	b.n	8001dc8 <HAL_I2C_Mem_Read+0x458>
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2201      	movs	r2, #1
 80019ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d007      	beq.n	80019ec <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f042 0201 	orr.w	r2, r2, #1
 80019ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2222      	movs	r2, #34	@ 0x22
 8001a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2240      	movs	r2, #64	@ 0x40
 8001a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a16:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001a1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4a5b      	ldr	r2, [pc, #364]	@ (8001b98 <HAL_I2C_Mem_Read+0x228>)
 8001a2c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a2e:	88f8      	ldrh	r0, [r7, #6]
 8001a30:	893a      	ldrh	r2, [r7, #8]
 8001a32:	8979      	ldrh	r1, [r7, #10]
 8001a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a36:	9301      	str	r3, [sp, #4]
 8001a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	68f8      	ldr	r0, [r7, #12]
 8001a40:	f000 fa5e 	bl	8001f00 <I2C_RequestMemoryRead>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e1bc      	b.n	8001dc8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d113      	bne.n	8001a7e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a56:	2300      	movs	r3, #0
 8001a58:	623b      	str	r3, [r7, #32]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	695b      	ldr	r3, [r3, #20]
 8001a60:	623b      	str	r3, [r7, #32]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	623b      	str	r3, [r7, #32]
 8001a6a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	e190      	b.n	8001da0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d11b      	bne.n	8001abe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a96:	2300      	movs	r3, #0
 8001a98:	61fb      	str	r3, [r7, #28]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	61fb      	str	r3, [r7, #28]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	61fb      	str	r3, [r7, #28]
 8001aaa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	e170      	b.n	8001da0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d11b      	bne.n	8001afe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ad4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ae4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61bb      	str	r3, [r7, #24]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	695b      	ldr	r3, [r3, #20]
 8001af0:	61bb      	str	r3, [r7, #24]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	61bb      	str	r3, [r7, #24]
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	e150      	b.n	8001da0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	617b      	str	r3, [r7, #20]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	617b      	str	r3, [r7, #20]
 8001b12:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001b14:	e144      	b.n	8001da0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b1a:	2b03      	cmp	r3, #3
 8001b1c:	f200 80f1 	bhi.w	8001d02 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d123      	bne.n	8001b70 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b2a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f000 fc79 	bl	8002424 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e145      	b.n	8001dc8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	691a      	ldr	r2, [r3, #16]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4e:	1c5a      	adds	r2, r3, #1
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	3b01      	subs	r3, #1
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001b6e:	e117      	b.n	8001da0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d14e      	bne.n	8001c16 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b7e:	2200      	movs	r2, #0
 8001b80:	4906      	ldr	r1, [pc, #24]	@ (8001b9c <HAL_I2C_Mem_Read+0x22c>)
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	f000 faa4 	bl	80020d0 <I2C_WaitOnFlagUntilTimeout>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d008      	beq.n	8001ba0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e11a      	b.n	8001dc8 <HAL_I2C_Mem_Read+0x458>
 8001b92:	bf00      	nop
 8001b94:	00100002 	.word	0x00100002
 8001b98:	ffff0000 	.word	0xffff0000
 8001b9c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	691a      	ldr	r2, [r3, #16]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc2:	1c5a      	adds	r2, r3, #1
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	691a      	ldr	r2, [r3, #16]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf4:	1c5a      	adds	r2, r3, #1
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001c14:	e0c4      	b.n	8001da0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c18:	9300      	str	r3, [sp, #0]
 8001c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	496c      	ldr	r1, [pc, #432]	@ (8001dd0 <HAL_I2C_Mem_Read+0x460>)
 8001c20:	68f8      	ldr	r0, [r7, #12]
 8001c22:	f000 fa55 	bl	80020d0 <I2C_WaitOnFlagUntilTimeout>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e0cb      	b.n	8001dc8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	691a      	ldr	r2, [r3, #16]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c52:	1c5a      	adds	r2, r3, #1
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c78:	2200      	movs	r2, #0
 8001c7a:	4955      	ldr	r1, [pc, #340]	@ (8001dd0 <HAL_I2C_Mem_Read+0x460>)
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f000 fa27 	bl	80020d0 <I2C_WaitOnFlagUntilTimeout>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e09d      	b.n	8001dc8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	691a      	ldr	r2, [r3, #16]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cae:	1c5a      	adds	r2, r3, #1
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	691a      	ldr	r2, [r3, #16]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd8:	b2d2      	uxtb	r2, r2
 8001cda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce0:	1c5a      	adds	r2, r3, #1
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cea:	3b01      	subs	r3, #1
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001d00:	e04e      	b.n	8001da0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d04:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001d06:	68f8      	ldr	r0, [r7, #12]
 8001d08:	f000 fb8c 	bl	8002424 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e058      	b.n	8001dc8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	691a      	ldr	r2, [r3, #16]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d28:	1c5a      	adds	r2, r3, #1
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d32:	3b01      	subs	r3, #1
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	3b01      	subs	r3, #1
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	f003 0304 	and.w	r3, r3, #4
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	d124      	bne.n	8001da0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d5a:	2b03      	cmp	r3, #3
 8001d5c:	d107      	bne.n	8001d6e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d6c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	691a      	ldr	r2, [r3, #16]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d80:	1c5a      	adds	r2, r3, #1
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f47f aeb6 	bne.w	8001b16 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2220      	movs	r2, #32
 8001dae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	e000      	b.n	8001dc8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001dc6:	2302      	movs	r3, #2
  }
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3728      	adds	r7, #40	@ 0x28
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	00010004 	.word	0x00010004

08001dd4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b088      	sub	sp, #32
 8001dd8:	af02      	add	r7, sp, #8
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	4608      	mov	r0, r1
 8001dde:	4611      	mov	r1, r2
 8001de0:	461a      	mov	r2, r3
 8001de2:	4603      	mov	r3, r0
 8001de4:	817b      	strh	r3, [r7, #10]
 8001de6:	460b      	mov	r3, r1
 8001de8:	813b      	strh	r3, [r7, #8]
 8001dea:	4613      	mov	r3, r2
 8001dec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dfc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e00:	9300      	str	r3, [sp, #0]
 8001e02:	6a3b      	ldr	r3, [r7, #32]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f000 f960 	bl	80020d0 <I2C_WaitOnFlagUntilTimeout>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00d      	beq.n	8001e32 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e24:	d103      	bne.n	8001e2e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e2c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e05f      	b.n	8001ef2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e32:	897b      	ldrh	r3, [r7, #10]
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	461a      	mov	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001e40:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e44:	6a3a      	ldr	r2, [r7, #32]
 8001e46:	492d      	ldr	r1, [pc, #180]	@ (8001efc <I2C_RequestMemoryWrite+0x128>)
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	f000 f9bb 	bl	80021c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e04c      	b.n	8001ef2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	617b      	str	r3, [r7, #20]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e70:	6a39      	ldr	r1, [r7, #32]
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f000 fa46 	bl	8002304 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00d      	beq.n	8001e9a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e82:	2b04      	cmp	r3, #4
 8001e84:	d107      	bne.n	8001e96 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e94:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e02b      	b.n	8001ef2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e9a:	88fb      	ldrh	r3, [r7, #6]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d105      	bne.n	8001eac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ea0:	893b      	ldrh	r3, [r7, #8]
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	611a      	str	r2, [r3, #16]
 8001eaa:	e021      	b.n	8001ef0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001eac:	893b      	ldrh	r3, [r7, #8]
 8001eae:	0a1b      	lsrs	r3, r3, #8
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	b2da      	uxtb	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001eba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ebc:	6a39      	ldr	r1, [r7, #32]
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f000 fa20 	bl	8002304 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00d      	beq.n	8001ee6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d107      	bne.n	8001ee2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ee0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e005      	b.n	8001ef2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ee6:	893b      	ldrh	r3, [r7, #8]
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	00010002 	.word	0x00010002

08001f00 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b088      	sub	sp, #32
 8001f04:	af02      	add	r7, sp, #8
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	4608      	mov	r0, r1
 8001f0a:	4611      	mov	r1, r2
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	4603      	mov	r3, r0
 8001f10:	817b      	strh	r3, [r7, #10]
 8001f12:	460b      	mov	r3, r1
 8001f14:	813b      	strh	r3, [r7, #8]
 8001f16:	4613      	mov	r3, r2
 8001f18:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001f28:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f38:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	6a3b      	ldr	r3, [r7, #32]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f000 f8c2 	bl	80020d0 <I2C_WaitOnFlagUntilTimeout>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00d      	beq.n	8001f6e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f60:	d103      	bne.n	8001f6a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f68:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e0aa      	b.n	80020c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f6e:	897b      	ldrh	r3, [r7, #10]
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	461a      	mov	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001f7c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f80:	6a3a      	ldr	r2, [r7, #32]
 8001f82:	4952      	ldr	r1, [pc, #328]	@ (80020cc <I2C_RequestMemoryRead+0x1cc>)
 8001f84:	68f8      	ldr	r0, [r7, #12]
 8001f86:	f000 f91d 	bl	80021c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e097      	b.n	80020c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	617b      	str	r3, [r7, #20]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	617b      	str	r3, [r7, #20]
 8001fa8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001faa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fac:	6a39      	ldr	r1, [r7, #32]
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 f9a8 	bl	8002304 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00d      	beq.n	8001fd6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	d107      	bne.n	8001fd2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fd0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e076      	b.n	80020c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001fd6:	88fb      	ldrh	r3, [r7, #6]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d105      	bne.n	8001fe8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001fdc:	893b      	ldrh	r3, [r7, #8]
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	611a      	str	r2, [r3, #16]
 8001fe6:	e021      	b.n	800202c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001fe8:	893b      	ldrh	r3, [r7, #8]
 8001fea:	0a1b      	lsrs	r3, r3, #8
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ff6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ff8:	6a39      	ldr	r1, [r7, #32]
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f000 f982 	bl	8002304 <I2C_WaitOnTXEFlagUntilTimeout>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00d      	beq.n	8002022 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200a:	2b04      	cmp	r3, #4
 800200c:	d107      	bne.n	800201e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800201c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e050      	b.n	80020c4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002022:	893b      	ldrh	r3, [r7, #8]
 8002024:	b2da      	uxtb	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800202c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800202e:	6a39      	ldr	r1, [r7, #32]
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f000 f967 	bl	8002304 <I2C_WaitOnTXEFlagUntilTimeout>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00d      	beq.n	8002058 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002040:	2b04      	cmp	r3, #4
 8002042:	d107      	bne.n	8002054 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002052:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e035      	b.n	80020c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002066:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	6a3b      	ldr	r3, [r7, #32]
 800206e:	2200      	movs	r2, #0
 8002070:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f000 f82b 	bl	80020d0 <I2C_WaitOnFlagUntilTimeout>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00d      	beq.n	800209c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800208a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800208e:	d103      	bne.n	8002098 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002096:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e013      	b.n	80020c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800209c:	897b      	ldrh	r3, [r7, #10]
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ae:	6a3a      	ldr	r2, [r7, #32]
 80020b0:	4906      	ldr	r1, [pc, #24]	@ (80020cc <I2C_RequestMemoryRead+0x1cc>)
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f000 f886 	bl	80021c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e000      	b.n	80020c4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	00010002 	.word	0x00010002

080020d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	603b      	str	r3, [r7, #0]
 80020dc:	4613      	mov	r3, r2
 80020de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020e0:	e048      	b.n	8002174 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80020e8:	d044      	beq.n	8002174 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ea:	f7fe fefb 	bl	8000ee4 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d302      	bcc.n	8002100 <I2C_WaitOnFlagUntilTimeout+0x30>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d139      	bne.n	8002174 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	0c1b      	lsrs	r3, r3, #16
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b01      	cmp	r3, #1
 8002108:	d10d      	bne.n	8002126 <I2C_WaitOnFlagUntilTimeout+0x56>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	695b      	ldr	r3, [r3, #20]
 8002110:	43da      	mvns	r2, r3
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	4013      	ands	r3, r2
 8002116:	b29b      	uxth	r3, r3
 8002118:	2b00      	cmp	r3, #0
 800211a:	bf0c      	ite	eq
 800211c:	2301      	moveq	r3, #1
 800211e:	2300      	movne	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	461a      	mov	r2, r3
 8002124:	e00c      	b.n	8002140 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	43da      	mvns	r2, r3
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	4013      	ands	r3, r2
 8002132:	b29b      	uxth	r3, r3
 8002134:	2b00      	cmp	r3, #0
 8002136:	bf0c      	ite	eq
 8002138:	2301      	moveq	r3, #1
 800213a:	2300      	movne	r3, #0
 800213c:	b2db      	uxtb	r3, r3
 800213e:	461a      	mov	r2, r3
 8002140:	79fb      	ldrb	r3, [r7, #7]
 8002142:	429a      	cmp	r2, r3
 8002144:	d116      	bne.n	8002174 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2220      	movs	r2, #32
 8002150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002160:	f043 0220 	orr.w	r2, r3, #32
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e023      	b.n	80021bc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	0c1b      	lsrs	r3, r3, #16
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b01      	cmp	r3, #1
 800217c:	d10d      	bne.n	800219a <I2C_WaitOnFlagUntilTimeout+0xca>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	43da      	mvns	r2, r3
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	4013      	ands	r3, r2
 800218a:	b29b      	uxth	r3, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	bf0c      	ite	eq
 8002190:	2301      	moveq	r3, #1
 8002192:	2300      	movne	r3, #0
 8002194:	b2db      	uxtb	r3, r3
 8002196:	461a      	mov	r2, r3
 8002198:	e00c      	b.n	80021b4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	43da      	mvns	r2, r3
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	4013      	ands	r3, r2
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	bf0c      	ite	eq
 80021ac:	2301      	moveq	r3, #1
 80021ae:	2300      	movne	r3, #0
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	461a      	mov	r2, r3
 80021b4:	79fb      	ldrb	r3, [r7, #7]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d093      	beq.n	80020e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
 80021d0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021d2:	e071      	b.n	80022b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021e2:	d123      	bne.n	800222c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021f2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80021fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2220      	movs	r2, #32
 8002208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002218:	f043 0204 	orr.w	r2, r3, #4
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e067      	b.n	80022fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002232:	d041      	beq.n	80022b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002234:	f7fe fe56 	bl	8000ee4 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	429a      	cmp	r2, r3
 8002242:	d302      	bcc.n	800224a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d136      	bne.n	80022b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	0c1b      	lsrs	r3, r3, #16
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b01      	cmp	r3, #1
 8002252:	d10c      	bne.n	800226e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	43da      	mvns	r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	4013      	ands	r3, r2
 8002260:	b29b      	uxth	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	bf14      	ite	ne
 8002266:	2301      	movne	r3, #1
 8002268:	2300      	moveq	r3, #0
 800226a:	b2db      	uxtb	r3, r3
 800226c:	e00b      	b.n	8002286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	43da      	mvns	r2, r3
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	4013      	ands	r3, r2
 800227a:	b29b      	uxth	r3, r3
 800227c:	2b00      	cmp	r3, #0
 800227e:	bf14      	ite	ne
 8002280:	2301      	movne	r3, #1
 8002282:	2300      	moveq	r3, #0
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d016      	beq.n	80022b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2220      	movs	r2, #32
 8002294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a4:	f043 0220 	orr.w	r2, r3, #32
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e021      	b.n	80022fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	0c1b      	lsrs	r3, r3, #16
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d10c      	bne.n	80022dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	43da      	mvns	r2, r3
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	4013      	ands	r3, r2
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	bf14      	ite	ne
 80022d4:	2301      	movne	r3, #1
 80022d6:	2300      	moveq	r3, #0
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	e00b      	b.n	80022f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	43da      	mvns	r2, r3
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	4013      	ands	r3, r2
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	bf14      	ite	ne
 80022ee:	2301      	movne	r3, #1
 80022f0:	2300      	moveq	r3, #0
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f47f af6d 	bne.w	80021d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002310:	e034      	b.n	800237c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 f8e3 	bl	80024de <I2C_IsAcknowledgeFailed>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e034      	b.n	800238c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002328:	d028      	beq.n	800237c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800232a:	f7fe fddb 	bl	8000ee4 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	429a      	cmp	r2, r3
 8002338:	d302      	bcc.n	8002340 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d11d      	bne.n	800237c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800234a:	2b80      	cmp	r3, #128	@ 0x80
 800234c:	d016      	beq.n	800237c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2220      	movs	r2, #32
 8002358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002368:	f043 0220 	orr.w	r2, r3, #32
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e007      	b.n	800238c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002386:	2b80      	cmp	r3, #128	@ 0x80
 8002388:	d1c3      	bne.n	8002312 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023a0:	e034      	b.n	800240c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f000 f89b 	bl	80024de <I2C_IsAcknowledgeFailed>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e034      	b.n	800241c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023b8:	d028      	beq.n	800240c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ba:	f7fe fd93 	bl	8000ee4 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d302      	bcc.n	80023d0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d11d      	bne.n	800240c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	f003 0304 	and.w	r3, r3, #4
 80023da:	2b04      	cmp	r3, #4
 80023dc:	d016      	beq.n	800240c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2220      	movs	r2, #32
 80023e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f8:	f043 0220 	orr.w	r2, r3, #32
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e007      	b.n	800241c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	f003 0304 	and.w	r3, r3, #4
 8002416:	2b04      	cmp	r3, #4
 8002418:	d1c3      	bne.n	80023a2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002430:	e049      	b.n	80024c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	f003 0310 	and.w	r3, r3, #16
 800243c:	2b10      	cmp	r3, #16
 800243e:	d119      	bne.n	8002474 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f06f 0210 	mvn.w	r2, #16
 8002448:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2220      	movs	r2, #32
 8002454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e030      	b.n	80024d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002474:	f7fe fd36 	bl	8000ee4 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	68ba      	ldr	r2, [r7, #8]
 8002480:	429a      	cmp	r2, r3
 8002482:	d302      	bcc.n	800248a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d11d      	bne.n	80024c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002494:	2b40      	cmp	r3, #64	@ 0x40
 8002496:	d016      	beq.n	80024c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2220      	movs	r2, #32
 80024a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b2:	f043 0220 	orr.w	r2, r3, #32
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e007      	b.n	80024d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024d0:	2b40      	cmp	r3, #64	@ 0x40
 80024d2:	d1ae      	bne.n	8002432 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	695b      	ldr	r3, [r3, #20]
 80024ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024f4:	d11b      	bne.n	800252e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80024fe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2220      	movs	r2, #32
 800250a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251a:	f043 0204 	orr.w	r2, r3, #4
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e000      	b.n	8002530 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002542:	2300      	movs	r3, #0
 8002544:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	603b      	str	r3, [r7, #0]
 800254a:	4b20      	ldr	r3, [pc, #128]	@ (80025cc <HAL_PWREx_EnableOverDrive+0x90>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254e:	4a1f      	ldr	r2, [pc, #124]	@ (80025cc <HAL_PWREx_EnableOverDrive+0x90>)
 8002550:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002554:	6413      	str	r3, [r2, #64]	@ 0x40
 8002556:	4b1d      	ldr	r3, [pc, #116]	@ (80025cc <HAL_PWREx_EnableOverDrive+0x90>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800255e:	603b      	str	r3, [r7, #0]
 8002560:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002562:	4b1b      	ldr	r3, [pc, #108]	@ (80025d0 <HAL_PWREx_EnableOverDrive+0x94>)
 8002564:	2201      	movs	r2, #1
 8002566:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002568:	f7fe fcbc 	bl	8000ee4 <HAL_GetTick>
 800256c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800256e:	e009      	b.n	8002584 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002570:	f7fe fcb8 	bl	8000ee4 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800257e:	d901      	bls.n	8002584 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e01f      	b.n	80025c4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002584:	4b13      	ldr	r3, [pc, #76]	@ (80025d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800258c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002590:	d1ee      	bne.n	8002570 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002592:	4b11      	ldr	r3, [pc, #68]	@ (80025d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002594:	2201      	movs	r2, #1
 8002596:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002598:	f7fe fca4 	bl	8000ee4 <HAL_GetTick>
 800259c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800259e:	e009      	b.n	80025b4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80025a0:	f7fe fca0 	bl	8000ee4 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80025ae:	d901      	bls.n	80025b4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e007      	b.n	80025c4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80025b4:	4b07      	ldr	r3, [pc, #28]	@ (80025d4 <HAL_PWREx_EnableOverDrive+0x98>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80025c0:	d1ee      	bne.n	80025a0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40023800 	.word	0x40023800
 80025d0:	420e0040 	.word	0x420e0040
 80025d4:	40007000 	.word	0x40007000
 80025d8:	420e0044 	.word	0x420e0044

080025dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e0cc      	b.n	800278a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025f0:	4b68      	ldr	r3, [pc, #416]	@ (8002794 <HAL_RCC_ClockConfig+0x1b8>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 030f 	and.w	r3, r3, #15
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d90c      	bls.n	8002618 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fe:	4b65      	ldr	r3, [pc, #404]	@ (8002794 <HAL_RCC_ClockConfig+0x1b8>)
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002606:	4b63      	ldr	r3, [pc, #396]	@ (8002794 <HAL_RCC_ClockConfig+0x1b8>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	429a      	cmp	r2, r3
 8002612:	d001      	beq.n	8002618 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e0b8      	b.n	800278a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d020      	beq.n	8002666 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b00      	cmp	r3, #0
 800262e:	d005      	beq.n	800263c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002630:	4b59      	ldr	r3, [pc, #356]	@ (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	4a58      	ldr	r2, [pc, #352]	@ (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 8002636:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800263a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0308 	and.w	r3, r3, #8
 8002644:	2b00      	cmp	r3, #0
 8002646:	d005      	beq.n	8002654 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002648:	4b53      	ldr	r3, [pc, #332]	@ (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	4a52      	ldr	r2, [pc, #328]	@ (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 800264e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002652:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002654:	4b50      	ldr	r3, [pc, #320]	@ (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	494d      	ldr	r1, [pc, #308]	@ (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 8002662:	4313      	orrs	r3, r2
 8002664:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d044      	beq.n	80026fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d107      	bne.n	800268a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800267a:	4b47      	ldr	r3, [pc, #284]	@ (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d119      	bne.n	80026ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e07f      	b.n	800278a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d003      	beq.n	800269a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002696:	2b03      	cmp	r3, #3
 8002698:	d107      	bne.n	80026aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800269a:	4b3f      	ldr	r3, [pc, #252]	@ (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d109      	bne.n	80026ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e06f      	b.n	800278a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e067      	b.n	800278a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ba:	4b37      	ldr	r3, [pc, #220]	@ (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f023 0203 	bic.w	r2, r3, #3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	4934      	ldr	r1, [pc, #208]	@ (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026cc:	f7fe fc0a 	bl	8000ee4 <HAL_GetTick>
 80026d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d2:	e00a      	b.n	80026ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026d4:	f7fe fc06 	bl	8000ee4 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e04f      	b.n	800278a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 020c 	and.w	r2, r3, #12
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d1eb      	bne.n	80026d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026fc:	4b25      	ldr	r3, [pc, #148]	@ (8002794 <HAL_RCC_ClockConfig+0x1b8>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 030f 	and.w	r3, r3, #15
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	429a      	cmp	r2, r3
 8002708:	d20c      	bcs.n	8002724 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800270a:	4b22      	ldr	r3, [pc, #136]	@ (8002794 <HAL_RCC_ClockConfig+0x1b8>)
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002712:	4b20      	ldr	r3, [pc, #128]	@ (8002794 <HAL_RCC_ClockConfig+0x1b8>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	429a      	cmp	r2, r3
 800271e:	d001      	beq.n	8002724 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e032      	b.n	800278a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	2b00      	cmp	r3, #0
 800272e:	d008      	beq.n	8002742 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002730:	4b19      	ldr	r3, [pc, #100]	@ (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	4916      	ldr	r1, [pc, #88]	@ (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 800273e:	4313      	orrs	r3, r2
 8002740:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	2b00      	cmp	r3, #0
 800274c:	d009      	beq.n	8002762 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800274e:	4b12      	ldr	r3, [pc, #72]	@ (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	490e      	ldr	r1, [pc, #56]	@ (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 800275e:	4313      	orrs	r3, r2
 8002760:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002762:	f000 f855 	bl	8002810 <HAL_RCC_GetSysClockFreq>
 8002766:	4602      	mov	r2, r0
 8002768:	4b0b      	ldr	r3, [pc, #44]	@ (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	091b      	lsrs	r3, r3, #4
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	490a      	ldr	r1, [pc, #40]	@ (800279c <HAL_RCC_ClockConfig+0x1c0>)
 8002774:	5ccb      	ldrb	r3, [r1, r3]
 8002776:	fa22 f303 	lsr.w	r3, r2, r3
 800277a:	4a09      	ldr	r2, [pc, #36]	@ (80027a0 <HAL_RCC_ClockConfig+0x1c4>)
 800277c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800277e:	4b09      	ldr	r3, [pc, #36]	@ (80027a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f7fe fb6a 	bl	8000e5c <HAL_InitTick>

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40023c00 	.word	0x40023c00
 8002798:	40023800 	.word	0x40023800
 800279c:	08004754 	.word	0x08004754
 80027a0:	20000000 	.word	0x20000000
 80027a4:	20000004 	.word	0x20000004

080027a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027ac:	4b03      	ldr	r3, [pc, #12]	@ (80027bc <HAL_RCC_GetHCLKFreq+0x14>)
 80027ae:	681b      	ldr	r3, [r3, #0]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	20000000 	.word	0x20000000

080027c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027c4:	f7ff fff0 	bl	80027a8 <HAL_RCC_GetHCLKFreq>
 80027c8:	4602      	mov	r2, r0
 80027ca:	4b05      	ldr	r3, [pc, #20]	@ (80027e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	0a9b      	lsrs	r3, r3, #10
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	4903      	ldr	r1, [pc, #12]	@ (80027e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027d6:	5ccb      	ldrb	r3, [r1, r3]
 80027d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027dc:	4618      	mov	r0, r3
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40023800 	.word	0x40023800
 80027e4:	08004764 	.word	0x08004764

080027e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027ec:	f7ff ffdc 	bl	80027a8 <HAL_RCC_GetHCLKFreq>
 80027f0:	4602      	mov	r2, r0
 80027f2:	4b05      	ldr	r3, [pc, #20]	@ (8002808 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	0b5b      	lsrs	r3, r3, #13
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	4903      	ldr	r1, [pc, #12]	@ (800280c <HAL_RCC_GetPCLK2Freq+0x24>)
 80027fe:	5ccb      	ldrb	r3, [r1, r3]
 8002800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002804:	4618      	mov	r0, r3
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40023800 	.word	0x40023800
 800280c:	08004764 	.word	0x08004764

08002810 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002810:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002814:	b0ae      	sub	sp, #184	@ 0xb8
 8002816:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002818:	2300      	movs	r3, #0
 800281a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800281e:	2300      	movs	r3, #0
 8002820:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800282a:	2300      	movs	r3, #0
 800282c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002836:	4bcb      	ldr	r3, [pc, #812]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x354>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 030c 	and.w	r3, r3, #12
 800283e:	2b0c      	cmp	r3, #12
 8002840:	f200 8206 	bhi.w	8002c50 <HAL_RCC_GetSysClockFreq+0x440>
 8002844:	a201      	add	r2, pc, #4	@ (adr r2, 800284c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800284a:	bf00      	nop
 800284c:	08002881 	.word	0x08002881
 8002850:	08002c51 	.word	0x08002c51
 8002854:	08002c51 	.word	0x08002c51
 8002858:	08002c51 	.word	0x08002c51
 800285c:	08002889 	.word	0x08002889
 8002860:	08002c51 	.word	0x08002c51
 8002864:	08002c51 	.word	0x08002c51
 8002868:	08002c51 	.word	0x08002c51
 800286c:	08002891 	.word	0x08002891
 8002870:	08002c51 	.word	0x08002c51
 8002874:	08002c51 	.word	0x08002c51
 8002878:	08002c51 	.word	0x08002c51
 800287c:	08002a81 	.word	0x08002a81
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002880:	4bb9      	ldr	r3, [pc, #740]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0x358>)
 8002882:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002886:	e1e7      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002888:	4bb8      	ldr	r3, [pc, #736]	@ (8002b6c <HAL_RCC_GetSysClockFreq+0x35c>)
 800288a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800288e:	e1e3      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002890:	4bb4      	ldr	r3, [pc, #720]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x354>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002898:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800289c:	4bb1      	ldr	r3, [pc, #708]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x354>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d071      	beq.n	800298c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028a8:	4bae      	ldr	r3, [pc, #696]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x354>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	099b      	lsrs	r3, r3, #6
 80028ae:	2200      	movs	r2, #0
 80028b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80028b4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80028b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80028c4:	2300      	movs	r3, #0
 80028c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80028ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80028ce:	4622      	mov	r2, r4
 80028d0:	462b      	mov	r3, r5
 80028d2:	f04f 0000 	mov.w	r0, #0
 80028d6:	f04f 0100 	mov.w	r1, #0
 80028da:	0159      	lsls	r1, r3, #5
 80028dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028e0:	0150      	lsls	r0, r2, #5
 80028e2:	4602      	mov	r2, r0
 80028e4:	460b      	mov	r3, r1
 80028e6:	4621      	mov	r1, r4
 80028e8:	1a51      	subs	r1, r2, r1
 80028ea:	6439      	str	r1, [r7, #64]	@ 0x40
 80028ec:	4629      	mov	r1, r5
 80028ee:	eb63 0301 	sbc.w	r3, r3, r1
 80028f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80028f4:	f04f 0200 	mov.w	r2, #0
 80028f8:	f04f 0300 	mov.w	r3, #0
 80028fc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002900:	4649      	mov	r1, r9
 8002902:	018b      	lsls	r3, r1, #6
 8002904:	4641      	mov	r1, r8
 8002906:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800290a:	4641      	mov	r1, r8
 800290c:	018a      	lsls	r2, r1, #6
 800290e:	4641      	mov	r1, r8
 8002910:	1a51      	subs	r1, r2, r1
 8002912:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002914:	4649      	mov	r1, r9
 8002916:	eb63 0301 	sbc.w	r3, r3, r1
 800291a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800291c:	f04f 0200 	mov.w	r2, #0
 8002920:	f04f 0300 	mov.w	r3, #0
 8002924:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002928:	4649      	mov	r1, r9
 800292a:	00cb      	lsls	r3, r1, #3
 800292c:	4641      	mov	r1, r8
 800292e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002932:	4641      	mov	r1, r8
 8002934:	00ca      	lsls	r2, r1, #3
 8002936:	4610      	mov	r0, r2
 8002938:	4619      	mov	r1, r3
 800293a:	4603      	mov	r3, r0
 800293c:	4622      	mov	r2, r4
 800293e:	189b      	adds	r3, r3, r2
 8002940:	633b      	str	r3, [r7, #48]	@ 0x30
 8002942:	462b      	mov	r3, r5
 8002944:	460a      	mov	r2, r1
 8002946:	eb42 0303 	adc.w	r3, r2, r3
 800294a:	637b      	str	r3, [r7, #52]	@ 0x34
 800294c:	f04f 0200 	mov.w	r2, #0
 8002950:	f04f 0300 	mov.w	r3, #0
 8002954:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002958:	4629      	mov	r1, r5
 800295a:	024b      	lsls	r3, r1, #9
 800295c:	4621      	mov	r1, r4
 800295e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002962:	4621      	mov	r1, r4
 8002964:	024a      	lsls	r2, r1, #9
 8002966:	4610      	mov	r0, r2
 8002968:	4619      	mov	r1, r3
 800296a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800296e:	2200      	movs	r2, #0
 8002970:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002974:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002978:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800297c:	f7fd fc42 	bl	8000204 <__aeabi_uldivmod>
 8002980:	4602      	mov	r2, r0
 8002982:	460b      	mov	r3, r1
 8002984:	4613      	mov	r3, r2
 8002986:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800298a:	e067      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800298c:	4b75      	ldr	r3, [pc, #468]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x354>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	099b      	lsrs	r3, r3, #6
 8002992:	2200      	movs	r2, #0
 8002994:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002998:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800299c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80029a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80029a6:	2300      	movs	r3, #0
 80029a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80029aa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80029ae:	4622      	mov	r2, r4
 80029b0:	462b      	mov	r3, r5
 80029b2:	f04f 0000 	mov.w	r0, #0
 80029b6:	f04f 0100 	mov.w	r1, #0
 80029ba:	0159      	lsls	r1, r3, #5
 80029bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029c0:	0150      	lsls	r0, r2, #5
 80029c2:	4602      	mov	r2, r0
 80029c4:	460b      	mov	r3, r1
 80029c6:	4621      	mov	r1, r4
 80029c8:	1a51      	subs	r1, r2, r1
 80029ca:	62b9      	str	r1, [r7, #40]	@ 0x28
 80029cc:	4629      	mov	r1, r5
 80029ce:	eb63 0301 	sbc.w	r3, r3, r1
 80029d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	f04f 0300 	mov.w	r3, #0
 80029dc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80029e0:	4649      	mov	r1, r9
 80029e2:	018b      	lsls	r3, r1, #6
 80029e4:	4641      	mov	r1, r8
 80029e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029ea:	4641      	mov	r1, r8
 80029ec:	018a      	lsls	r2, r1, #6
 80029ee:	4641      	mov	r1, r8
 80029f0:	ebb2 0a01 	subs.w	sl, r2, r1
 80029f4:	4649      	mov	r1, r9
 80029f6:	eb63 0b01 	sbc.w	fp, r3, r1
 80029fa:	f04f 0200 	mov.w	r2, #0
 80029fe:	f04f 0300 	mov.w	r3, #0
 8002a02:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a06:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a0e:	4692      	mov	sl, r2
 8002a10:	469b      	mov	fp, r3
 8002a12:	4623      	mov	r3, r4
 8002a14:	eb1a 0303 	adds.w	r3, sl, r3
 8002a18:	623b      	str	r3, [r7, #32]
 8002a1a:	462b      	mov	r3, r5
 8002a1c:	eb4b 0303 	adc.w	r3, fp, r3
 8002a20:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a22:	f04f 0200 	mov.w	r2, #0
 8002a26:	f04f 0300 	mov.w	r3, #0
 8002a2a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002a2e:	4629      	mov	r1, r5
 8002a30:	028b      	lsls	r3, r1, #10
 8002a32:	4621      	mov	r1, r4
 8002a34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a38:	4621      	mov	r1, r4
 8002a3a:	028a      	lsls	r2, r1, #10
 8002a3c:	4610      	mov	r0, r2
 8002a3e:	4619      	mov	r1, r3
 8002a40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a44:	2200      	movs	r2, #0
 8002a46:	673b      	str	r3, [r7, #112]	@ 0x70
 8002a48:	677a      	str	r2, [r7, #116]	@ 0x74
 8002a4a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002a4e:	f7fd fbd9 	bl	8000204 <__aeabi_uldivmod>
 8002a52:	4602      	mov	r2, r0
 8002a54:	460b      	mov	r3, r1
 8002a56:	4613      	mov	r3, r2
 8002a58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002a5c:	4b41      	ldr	r3, [pc, #260]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	0c1b      	lsrs	r3, r3, #16
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	3301      	adds	r3, #1
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002a6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a7e:	e0eb      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a80:	4b38      	ldr	r3, [pc, #224]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a8c:	4b35      	ldr	r3, [pc, #212]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d06b      	beq.n	8002b70 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a98:	4b32      	ldr	r3, [pc, #200]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	099b      	lsrs	r3, r3, #6
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002aa2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002aa4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aaa:	663b      	str	r3, [r7, #96]	@ 0x60
 8002aac:	2300      	movs	r3, #0
 8002aae:	667b      	str	r3, [r7, #100]	@ 0x64
 8002ab0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002ab4:	4622      	mov	r2, r4
 8002ab6:	462b      	mov	r3, r5
 8002ab8:	f04f 0000 	mov.w	r0, #0
 8002abc:	f04f 0100 	mov.w	r1, #0
 8002ac0:	0159      	lsls	r1, r3, #5
 8002ac2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ac6:	0150      	lsls	r0, r2, #5
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	4621      	mov	r1, r4
 8002ace:	1a51      	subs	r1, r2, r1
 8002ad0:	61b9      	str	r1, [r7, #24]
 8002ad2:	4629      	mov	r1, r5
 8002ad4:	eb63 0301 	sbc.w	r3, r3, r1
 8002ad8:	61fb      	str	r3, [r7, #28]
 8002ada:	f04f 0200 	mov.w	r2, #0
 8002ade:	f04f 0300 	mov.w	r3, #0
 8002ae2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002ae6:	4659      	mov	r1, fp
 8002ae8:	018b      	lsls	r3, r1, #6
 8002aea:	4651      	mov	r1, sl
 8002aec:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002af0:	4651      	mov	r1, sl
 8002af2:	018a      	lsls	r2, r1, #6
 8002af4:	4651      	mov	r1, sl
 8002af6:	ebb2 0801 	subs.w	r8, r2, r1
 8002afa:	4659      	mov	r1, fp
 8002afc:	eb63 0901 	sbc.w	r9, r3, r1
 8002b00:	f04f 0200 	mov.w	r2, #0
 8002b04:	f04f 0300 	mov.w	r3, #0
 8002b08:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b0c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b10:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b14:	4690      	mov	r8, r2
 8002b16:	4699      	mov	r9, r3
 8002b18:	4623      	mov	r3, r4
 8002b1a:	eb18 0303 	adds.w	r3, r8, r3
 8002b1e:	613b      	str	r3, [r7, #16]
 8002b20:	462b      	mov	r3, r5
 8002b22:	eb49 0303 	adc.w	r3, r9, r3
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	f04f 0200 	mov.w	r2, #0
 8002b2c:	f04f 0300 	mov.w	r3, #0
 8002b30:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002b34:	4629      	mov	r1, r5
 8002b36:	024b      	lsls	r3, r1, #9
 8002b38:	4621      	mov	r1, r4
 8002b3a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b3e:	4621      	mov	r1, r4
 8002b40:	024a      	lsls	r2, r1, #9
 8002b42:	4610      	mov	r0, r2
 8002b44:	4619      	mov	r1, r3
 8002b46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002b4e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002b50:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002b54:	f7fd fb56 	bl	8000204 <__aeabi_uldivmod>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b62:	e065      	b.n	8002c30 <HAL_RCC_GetSysClockFreq+0x420>
 8002b64:	40023800 	.word	0x40023800
 8002b68:	00f42400 	.word	0x00f42400
 8002b6c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b70:	4b3d      	ldr	r3, [pc, #244]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x458>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	099b      	lsrs	r3, r3, #6
 8002b76:	2200      	movs	r2, #0
 8002b78:	4618      	mov	r0, r3
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b80:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b82:	2300      	movs	r3, #0
 8002b84:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b86:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002b8a:	4642      	mov	r2, r8
 8002b8c:	464b      	mov	r3, r9
 8002b8e:	f04f 0000 	mov.w	r0, #0
 8002b92:	f04f 0100 	mov.w	r1, #0
 8002b96:	0159      	lsls	r1, r3, #5
 8002b98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b9c:	0150      	lsls	r0, r2, #5
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	4641      	mov	r1, r8
 8002ba4:	1a51      	subs	r1, r2, r1
 8002ba6:	60b9      	str	r1, [r7, #8]
 8002ba8:	4649      	mov	r1, r9
 8002baa:	eb63 0301 	sbc.w	r3, r3, r1
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	f04f 0200 	mov.w	r2, #0
 8002bb4:	f04f 0300 	mov.w	r3, #0
 8002bb8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002bbc:	4659      	mov	r1, fp
 8002bbe:	018b      	lsls	r3, r1, #6
 8002bc0:	4651      	mov	r1, sl
 8002bc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bc6:	4651      	mov	r1, sl
 8002bc8:	018a      	lsls	r2, r1, #6
 8002bca:	4651      	mov	r1, sl
 8002bcc:	1a54      	subs	r4, r2, r1
 8002bce:	4659      	mov	r1, fp
 8002bd0:	eb63 0501 	sbc.w	r5, r3, r1
 8002bd4:	f04f 0200 	mov.w	r2, #0
 8002bd8:	f04f 0300 	mov.w	r3, #0
 8002bdc:	00eb      	lsls	r3, r5, #3
 8002bde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002be2:	00e2      	lsls	r2, r4, #3
 8002be4:	4614      	mov	r4, r2
 8002be6:	461d      	mov	r5, r3
 8002be8:	4643      	mov	r3, r8
 8002bea:	18e3      	adds	r3, r4, r3
 8002bec:	603b      	str	r3, [r7, #0]
 8002bee:	464b      	mov	r3, r9
 8002bf0:	eb45 0303 	adc.w	r3, r5, r3
 8002bf4:	607b      	str	r3, [r7, #4]
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	f04f 0300 	mov.w	r3, #0
 8002bfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c02:	4629      	mov	r1, r5
 8002c04:	028b      	lsls	r3, r1, #10
 8002c06:	4621      	mov	r1, r4
 8002c08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c0c:	4621      	mov	r1, r4
 8002c0e:	028a      	lsls	r2, r1, #10
 8002c10:	4610      	mov	r0, r2
 8002c12:	4619      	mov	r1, r3
 8002c14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c18:	2200      	movs	r2, #0
 8002c1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c1c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002c1e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002c22:	f7fd faef 	bl	8000204 <__aeabi_uldivmod>
 8002c26:	4602      	mov	r2, r0
 8002c28:	460b      	mov	r3, r1
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002c30:	4b0d      	ldr	r3, [pc, #52]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x458>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	0f1b      	lsrs	r3, r3, #28
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002c3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c4e:	e003      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c50:	4b06      	ldr	r3, [pc, #24]	@ (8002c6c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002c52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	37b8      	adds	r7, #184	@ 0xb8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c66:	bf00      	nop
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	00f42400 	.word	0x00f42400

08002c70 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e28d      	b.n	800319e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 8083 	beq.w	8002d96 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002c90:	4b94      	ldr	r3, [pc, #592]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f003 030c 	and.w	r3, r3, #12
 8002c98:	2b04      	cmp	r3, #4
 8002c9a:	d019      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c9c:	4b91      	ldr	r3, [pc, #580]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 030c 	and.w	r3, r3, #12
        || \
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	d106      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002ca8:	4b8e      	ldr	r3, [pc, #568]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cb4:	d00c      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cb6:	4b8b      	ldr	r3, [pc, #556]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002cbe:	2b0c      	cmp	r3, #12
 8002cc0:	d112      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cc2:	4b88      	ldr	r3, [pc, #544]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cce:	d10b      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd0:	4b84      	ldr	r3, [pc, #528]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d05b      	beq.n	8002d94 <HAL_RCC_OscConfig+0x124>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d157      	bne.n	8002d94 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e25a      	b.n	800319e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cf0:	d106      	bne.n	8002d00 <HAL_RCC_OscConfig+0x90>
 8002cf2:	4b7c      	ldr	r3, [pc, #496]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a7b      	ldr	r2, [pc, #492]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002cf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	e01d      	b.n	8002d3c <HAL_RCC_OscConfig+0xcc>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d08:	d10c      	bne.n	8002d24 <HAL_RCC_OscConfig+0xb4>
 8002d0a:	4b76      	ldr	r3, [pc, #472]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a75      	ldr	r2, [pc, #468]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002d10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	4b73      	ldr	r3, [pc, #460]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a72      	ldr	r2, [pc, #456]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002d1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d20:	6013      	str	r3, [r2, #0]
 8002d22:	e00b      	b.n	8002d3c <HAL_RCC_OscConfig+0xcc>
 8002d24:	4b6f      	ldr	r3, [pc, #444]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a6e      	ldr	r2, [pc, #440]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002d2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d2e:	6013      	str	r3, [r2, #0]
 8002d30:	4b6c      	ldr	r3, [pc, #432]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a6b      	ldr	r2, [pc, #428]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002d36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d013      	beq.n	8002d6c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d44:	f7fe f8ce 	bl	8000ee4 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d4c:	f7fe f8ca 	bl	8000ee4 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b64      	cmp	r3, #100	@ 0x64
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e21f      	b.n	800319e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5e:	4b61      	ldr	r3, [pc, #388]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0f0      	beq.n	8002d4c <HAL_RCC_OscConfig+0xdc>
 8002d6a:	e014      	b.n	8002d96 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6c:	f7fe f8ba 	bl	8000ee4 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d74:	f7fe f8b6 	bl	8000ee4 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b64      	cmp	r3, #100	@ 0x64
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e20b      	b.n	800319e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d86:	4b57      	ldr	r3, [pc, #348]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1f0      	bne.n	8002d74 <HAL_RCC_OscConfig+0x104>
 8002d92:	e000      	b.n	8002d96 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d06f      	beq.n	8002e82 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002da2:	4b50      	ldr	r3, [pc, #320]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 030c 	and.w	r3, r3, #12
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d017      	beq.n	8002dde <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002dae:	4b4d      	ldr	r3, [pc, #308]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 030c 	and.w	r3, r3, #12
        || \
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	d105      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002dba:	4b4a      	ldr	r3, [pc, #296]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00b      	beq.n	8002dde <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dc6:	4b47      	ldr	r3, [pc, #284]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002dce:	2b0c      	cmp	r3, #12
 8002dd0:	d11c      	bne.n	8002e0c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dd2:	4b44      	ldr	r3, [pc, #272]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d116      	bne.n	8002e0c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dde:	4b41      	ldr	r3, [pc, #260]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d005      	beq.n	8002df6 <HAL_RCC_OscConfig+0x186>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d001      	beq.n	8002df6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e1d3      	b.n	800319e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	4937      	ldr	r1, [pc, #220]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e0a:	e03a      	b.n	8002e82 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d020      	beq.n	8002e56 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e14:	4b34      	ldr	r3, [pc, #208]	@ (8002ee8 <HAL_RCC_OscConfig+0x278>)
 8002e16:	2201      	movs	r2, #1
 8002e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1a:	f7fe f863 	bl	8000ee4 <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e20:	e008      	b.n	8002e34 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e22:	f7fe f85f 	bl	8000ee4 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e1b4      	b.n	800319e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e34:	4b2b      	ldr	r3, [pc, #172]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0f0      	beq.n	8002e22 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e40:	4b28      	ldr	r3, [pc, #160]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	4925      	ldr	r1, [pc, #148]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	600b      	str	r3, [r1, #0]
 8002e54:	e015      	b.n	8002e82 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e56:	4b24      	ldr	r3, [pc, #144]	@ (8002ee8 <HAL_RCC_OscConfig+0x278>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5c:	f7fe f842 	bl	8000ee4 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e64:	f7fe f83e 	bl	8000ee4 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e193      	b.n	800319e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e76:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1f0      	bne.n	8002e64 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d036      	beq.n	8002efc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d016      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e96:	4b15      	ldr	r3, [pc, #84]	@ (8002eec <HAL_RCC_OscConfig+0x27c>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9c:	f7fe f822 	bl	8000ee4 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ea4:	f7fe f81e 	bl	8000ee4 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e173      	b.n	800319e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002eb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0f0      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x234>
 8002ec2:	e01b      	b.n	8002efc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ec4:	4b09      	ldr	r3, [pc, #36]	@ (8002eec <HAL_RCC_OscConfig+0x27c>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eca:	f7fe f80b 	bl	8000ee4 <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed0:	e00e      	b.n	8002ef0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ed2:	f7fe f807 	bl	8000ee4 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d907      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e15c      	b.n	800319e <HAL_RCC_OscConfig+0x52e>
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	42470000 	.word	0x42470000
 8002eec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef0:	4b8a      	ldr	r3, [pc, #552]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 8002ef2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1ea      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 8097 	beq.w	8003038 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f0e:	4b83      	ldr	r3, [pc, #524]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 8002f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10f      	bne.n	8002f3a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60bb      	str	r3, [r7, #8]
 8002f1e:	4b7f      	ldr	r3, [pc, #508]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f22:	4a7e      	ldr	r2, [pc, #504]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 8002f24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f28:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f2a:	4b7c      	ldr	r3, [pc, #496]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f32:	60bb      	str	r3, [r7, #8]
 8002f34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f36:	2301      	movs	r3, #1
 8002f38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3a:	4b79      	ldr	r3, [pc, #484]	@ (8003120 <HAL_RCC_OscConfig+0x4b0>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d118      	bne.n	8002f78 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f46:	4b76      	ldr	r3, [pc, #472]	@ (8003120 <HAL_RCC_OscConfig+0x4b0>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a75      	ldr	r2, [pc, #468]	@ (8003120 <HAL_RCC_OscConfig+0x4b0>)
 8002f4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f52:	f7fd ffc7 	bl	8000ee4 <HAL_GetTick>
 8002f56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f58:	e008      	b.n	8002f6c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f5a:	f7fd ffc3 	bl	8000ee4 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e118      	b.n	800319e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f6c:	4b6c      	ldr	r3, [pc, #432]	@ (8003120 <HAL_RCC_OscConfig+0x4b0>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d0f0      	beq.n	8002f5a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d106      	bne.n	8002f8e <HAL_RCC_OscConfig+0x31e>
 8002f80:	4b66      	ldr	r3, [pc, #408]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 8002f82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f84:	4a65      	ldr	r2, [pc, #404]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 8002f86:	f043 0301 	orr.w	r3, r3, #1
 8002f8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f8c:	e01c      	b.n	8002fc8 <HAL_RCC_OscConfig+0x358>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	2b05      	cmp	r3, #5
 8002f94:	d10c      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x340>
 8002f96:	4b61      	ldr	r3, [pc, #388]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 8002f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f9a:	4a60      	ldr	r2, [pc, #384]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 8002f9c:	f043 0304 	orr.w	r3, r3, #4
 8002fa0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fa2:	4b5e      	ldr	r3, [pc, #376]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 8002fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa6:	4a5d      	ldr	r2, [pc, #372]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 8002fa8:	f043 0301 	orr.w	r3, r3, #1
 8002fac:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fae:	e00b      	b.n	8002fc8 <HAL_RCC_OscConfig+0x358>
 8002fb0:	4b5a      	ldr	r3, [pc, #360]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 8002fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb4:	4a59      	ldr	r2, [pc, #356]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 8002fb6:	f023 0301 	bic.w	r3, r3, #1
 8002fba:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fbc:	4b57      	ldr	r3, [pc, #348]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 8002fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc0:	4a56      	ldr	r2, [pc, #344]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 8002fc2:	f023 0304 	bic.w	r3, r3, #4
 8002fc6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d015      	beq.n	8002ffc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd0:	f7fd ff88 	bl	8000ee4 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd6:	e00a      	b.n	8002fee <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fd8:	f7fd ff84 	bl	8000ee4 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e0d7      	b.n	800319e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fee:	4b4b      	ldr	r3, [pc, #300]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 8002ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d0ee      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x368>
 8002ffa:	e014      	b.n	8003026 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ffc:	f7fd ff72 	bl	8000ee4 <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003002:	e00a      	b.n	800301a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003004:	f7fd ff6e 	bl	8000ee4 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003012:	4293      	cmp	r3, r2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e0c1      	b.n	800319e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800301a:	4b40      	ldr	r3, [pc, #256]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 800301c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1ee      	bne.n	8003004 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003026:	7dfb      	ldrb	r3, [r7, #23]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d105      	bne.n	8003038 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800302c:	4b3b      	ldr	r3, [pc, #236]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 800302e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003030:	4a3a      	ldr	r2, [pc, #232]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 8003032:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003036:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 80ad 	beq.w	800319c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003042:	4b36      	ldr	r3, [pc, #216]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 030c 	and.w	r3, r3, #12
 800304a:	2b08      	cmp	r3, #8
 800304c:	d060      	beq.n	8003110 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	2b02      	cmp	r3, #2
 8003054:	d145      	bne.n	80030e2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003056:	4b33      	ldr	r3, [pc, #204]	@ (8003124 <HAL_RCC_OscConfig+0x4b4>)
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305c:	f7fd ff42 	bl	8000ee4 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003064:	f7fd ff3e 	bl	8000ee4 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e093      	b.n	800319e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003076:	4b29      	ldr	r3, [pc, #164]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1f0      	bne.n	8003064 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	69da      	ldr	r2, [r3, #28]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	431a      	orrs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003090:	019b      	lsls	r3, r3, #6
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003098:	085b      	lsrs	r3, r3, #1
 800309a:	3b01      	subs	r3, #1
 800309c:	041b      	lsls	r3, r3, #16
 800309e:	431a      	orrs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a4:	061b      	lsls	r3, r3, #24
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ac:	071b      	lsls	r3, r3, #28
 80030ae:	491b      	ldr	r1, [pc, #108]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003124 <HAL_RCC_OscConfig+0x4b4>)
 80030b6:	2201      	movs	r2, #1
 80030b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ba:	f7fd ff13 	bl	8000ee4 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c0:	e008      	b.n	80030d4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c2:	f7fd ff0f 	bl	8000ee4 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e064      	b.n	800319e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d4:	4b11      	ldr	r3, [pc, #68]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0f0      	beq.n	80030c2 <HAL_RCC_OscConfig+0x452>
 80030e0:	e05c      	b.n	800319c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e2:	4b10      	ldr	r3, [pc, #64]	@ (8003124 <HAL_RCC_OscConfig+0x4b4>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e8:	f7fd fefc 	bl	8000ee4 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f0:	f7fd fef8 	bl	8000ee4 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e04d      	b.n	800319e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003102:	4b06      	ldr	r3, [pc, #24]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1f0      	bne.n	80030f0 <HAL_RCC_OscConfig+0x480>
 800310e:	e045      	b.n	800319c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d107      	bne.n	8003128 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e040      	b.n	800319e <HAL_RCC_OscConfig+0x52e>
 800311c:	40023800 	.word	0x40023800
 8003120:	40007000 	.word	0x40007000
 8003124:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003128:	4b1f      	ldr	r3, [pc, #124]	@ (80031a8 <HAL_RCC_OscConfig+0x538>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d030      	beq.n	8003198 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003140:	429a      	cmp	r2, r3
 8003142:	d129      	bne.n	8003198 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800314e:	429a      	cmp	r2, r3
 8003150:	d122      	bne.n	8003198 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003158:	4013      	ands	r3, r2
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800315e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003160:	4293      	cmp	r3, r2
 8003162:	d119      	bne.n	8003198 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800316e:	085b      	lsrs	r3, r3, #1
 8003170:	3b01      	subs	r3, #1
 8003172:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003174:	429a      	cmp	r2, r3
 8003176:	d10f      	bne.n	8003198 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003182:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003184:	429a      	cmp	r2, r3
 8003186:	d107      	bne.n	8003198 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003192:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003194:	429a      	cmp	r2, r3
 8003196:	d001      	beq.n	800319c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e000      	b.n	800319e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40023800 	.word	0x40023800

080031ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e041      	b.n	8003242 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d106      	bne.n	80031d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7fd fd00 	bl	8000bd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2202      	movs	r2, #2
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3304      	adds	r3, #4
 80031e8:	4619      	mov	r1, r3
 80031ea:	4610      	mov	r0, r2
 80031ec:	f000 fbce 	bl	800398c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b082      	sub	sp, #8
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e041      	b.n	80032e0 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	d106      	bne.n	8003276 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 f839 	bl	80032e8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2202      	movs	r2, #2
 800327a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3304      	adds	r3, #4
 8003286:	4619      	mov	r1, r3
 8003288:	4610      	mov	r0, r2
 800328a:	f000 fb7f 	bl	800398c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003306:	2300      	movs	r3, #0
 8003308:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d109      	bne.n	8003324 <HAL_TIM_OC_Start_IT+0x28>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b01      	cmp	r3, #1
 800331a:	bf14      	ite	ne
 800331c:	2301      	movne	r3, #1
 800331e:	2300      	moveq	r3, #0
 8003320:	b2db      	uxtb	r3, r3
 8003322:	e022      	b.n	800336a <HAL_TIM_OC_Start_IT+0x6e>
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	2b04      	cmp	r3, #4
 8003328:	d109      	bne.n	800333e <HAL_TIM_OC_Start_IT+0x42>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b01      	cmp	r3, #1
 8003334:	bf14      	ite	ne
 8003336:	2301      	movne	r3, #1
 8003338:	2300      	moveq	r3, #0
 800333a:	b2db      	uxtb	r3, r3
 800333c:	e015      	b.n	800336a <HAL_TIM_OC_Start_IT+0x6e>
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2b08      	cmp	r3, #8
 8003342:	d109      	bne.n	8003358 <HAL_TIM_OC_Start_IT+0x5c>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b01      	cmp	r3, #1
 800334e:	bf14      	ite	ne
 8003350:	2301      	movne	r3, #1
 8003352:	2300      	moveq	r3, #0
 8003354:	b2db      	uxtb	r3, r3
 8003356:	e008      	b.n	800336a <HAL_TIM_OC_Start_IT+0x6e>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b01      	cmp	r3, #1
 8003362:	bf14      	ite	ne
 8003364:	2301      	movne	r3, #1
 8003366:	2300      	moveq	r3, #0
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e0c7      	b.n	8003502 <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d104      	bne.n	8003382 <HAL_TIM_OC_Start_IT+0x86>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2202      	movs	r2, #2
 800337c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003380:	e013      	b.n	80033aa <HAL_TIM_OC_Start_IT+0xae>
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	2b04      	cmp	r3, #4
 8003386:	d104      	bne.n	8003392 <HAL_TIM_OC_Start_IT+0x96>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2202      	movs	r2, #2
 800338c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003390:	e00b      	b.n	80033aa <HAL_TIM_OC_Start_IT+0xae>
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	2b08      	cmp	r3, #8
 8003396:	d104      	bne.n	80033a2 <HAL_TIM_OC_Start_IT+0xa6>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2202      	movs	r2, #2
 800339c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033a0:	e003      	b.n	80033aa <HAL_TIM_OC_Start_IT+0xae>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2202      	movs	r2, #2
 80033a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	2b0c      	cmp	r3, #12
 80033ae:	d841      	bhi.n	8003434 <HAL_TIM_OC_Start_IT+0x138>
 80033b0:	a201      	add	r2, pc, #4	@ (adr r2, 80033b8 <HAL_TIM_OC_Start_IT+0xbc>)
 80033b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b6:	bf00      	nop
 80033b8:	080033ed 	.word	0x080033ed
 80033bc:	08003435 	.word	0x08003435
 80033c0:	08003435 	.word	0x08003435
 80033c4:	08003435 	.word	0x08003435
 80033c8:	080033ff 	.word	0x080033ff
 80033cc:	08003435 	.word	0x08003435
 80033d0:	08003435 	.word	0x08003435
 80033d4:	08003435 	.word	0x08003435
 80033d8:	08003411 	.word	0x08003411
 80033dc:	08003435 	.word	0x08003435
 80033e0:	08003435 	.word	0x08003435
 80033e4:	08003435 	.word	0x08003435
 80033e8:	08003423 	.word	0x08003423
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0202 	orr.w	r2, r2, #2
 80033fa:	60da      	str	r2, [r3, #12]
      break;
 80033fc:	e01d      	b.n	800343a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68da      	ldr	r2, [r3, #12]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f042 0204 	orr.w	r2, r2, #4
 800340c:	60da      	str	r2, [r3, #12]
      break;
 800340e:	e014      	b.n	800343a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f042 0208 	orr.w	r2, r2, #8
 800341e:	60da      	str	r2, [r3, #12]
      break;
 8003420:	e00b      	b.n	800343a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68da      	ldr	r2, [r3, #12]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f042 0210 	orr.w	r2, r2, #16
 8003430:	60da      	str	r2, [r3, #12]
      break;
 8003432:	e002      	b.n	800343a <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	73fb      	strb	r3, [r7, #15]
      break;
 8003438:	bf00      	nop
  }

  if (status == HAL_OK)
 800343a:	7bfb      	ldrb	r3, [r7, #15]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d15f      	bne.n	8003500 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2201      	movs	r2, #1
 8003446:	6839      	ldr	r1, [r7, #0]
 8003448:	4618      	mov	r0, r3
 800344a:	f000 fcf5 	bl	8003e38 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a2e      	ldr	r2, [pc, #184]	@ (800350c <HAL_TIM_OC_Start_IT+0x210>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d004      	beq.n	8003462 <HAL_TIM_OC_Start_IT+0x166>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a2c      	ldr	r2, [pc, #176]	@ (8003510 <HAL_TIM_OC_Start_IT+0x214>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d101      	bne.n	8003466 <HAL_TIM_OC_Start_IT+0x16a>
 8003462:	2301      	movs	r3, #1
 8003464:	e000      	b.n	8003468 <HAL_TIM_OC_Start_IT+0x16c>
 8003466:	2300      	movs	r3, #0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d007      	beq.n	800347c <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800347a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a22      	ldr	r2, [pc, #136]	@ (800350c <HAL_TIM_OC_Start_IT+0x210>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d022      	beq.n	80034cc <HAL_TIM_OC_Start_IT+0x1d0>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800348e:	d01d      	beq.n	80034cc <HAL_TIM_OC_Start_IT+0x1d0>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a1f      	ldr	r2, [pc, #124]	@ (8003514 <HAL_TIM_OC_Start_IT+0x218>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d018      	beq.n	80034cc <HAL_TIM_OC_Start_IT+0x1d0>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a1e      	ldr	r2, [pc, #120]	@ (8003518 <HAL_TIM_OC_Start_IT+0x21c>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d013      	beq.n	80034cc <HAL_TIM_OC_Start_IT+0x1d0>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a1c      	ldr	r2, [pc, #112]	@ (800351c <HAL_TIM_OC_Start_IT+0x220>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d00e      	beq.n	80034cc <HAL_TIM_OC_Start_IT+0x1d0>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a17      	ldr	r2, [pc, #92]	@ (8003510 <HAL_TIM_OC_Start_IT+0x214>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d009      	beq.n	80034cc <HAL_TIM_OC_Start_IT+0x1d0>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a18      	ldr	r2, [pc, #96]	@ (8003520 <HAL_TIM_OC_Start_IT+0x224>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d004      	beq.n	80034cc <HAL_TIM_OC_Start_IT+0x1d0>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a17      	ldr	r2, [pc, #92]	@ (8003524 <HAL_TIM_OC_Start_IT+0x228>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d111      	bne.n	80034f0 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2b06      	cmp	r3, #6
 80034dc:	d010      	beq.n	8003500 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f042 0201 	orr.w	r2, r2, #1
 80034ec:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ee:	e007      	b.n	8003500 <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0201 	orr.w	r2, r2, #1
 80034fe:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003500:	7bfb      	ldrb	r3, [r7, #15]
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40010000 	.word	0x40010000
 8003510:	40010400 	.word	0x40010400
 8003514:	40000400 	.word	0x40000400
 8003518:	40000800 	.word	0x40000800
 800351c:	40000c00 	.word	0x40000c00
 8003520:	40014000 	.word	0x40014000
 8003524:	40001800 	.word	0x40001800

08003528 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003532:	2300      	movs	r3, #0
 8003534:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	2b0c      	cmp	r3, #12
 800353a:	d841      	bhi.n	80035c0 <HAL_TIM_OC_Stop_IT+0x98>
 800353c:	a201      	add	r2, pc, #4	@ (adr r2, 8003544 <HAL_TIM_OC_Stop_IT+0x1c>)
 800353e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003542:	bf00      	nop
 8003544:	08003579 	.word	0x08003579
 8003548:	080035c1 	.word	0x080035c1
 800354c:	080035c1 	.word	0x080035c1
 8003550:	080035c1 	.word	0x080035c1
 8003554:	0800358b 	.word	0x0800358b
 8003558:	080035c1 	.word	0x080035c1
 800355c:	080035c1 	.word	0x080035c1
 8003560:	080035c1 	.word	0x080035c1
 8003564:	0800359d 	.word	0x0800359d
 8003568:	080035c1 	.word	0x080035c1
 800356c:	080035c1 	.word	0x080035c1
 8003570:	080035c1 	.word	0x080035c1
 8003574:	080035af 	.word	0x080035af
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0202 	bic.w	r2, r2, #2
 8003586:	60da      	str	r2, [r3, #12]
      break;
 8003588:	e01d      	b.n	80035c6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68da      	ldr	r2, [r3, #12]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0204 	bic.w	r2, r2, #4
 8003598:	60da      	str	r2, [r3, #12]
      break;
 800359a:	e014      	b.n	80035c6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 0208 	bic.w	r2, r2, #8
 80035aa:	60da      	str	r2, [r3, #12]
      break;
 80035ac:	e00b      	b.n	80035c6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68da      	ldr	r2, [r3, #12]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0210 	bic.w	r2, r2, #16
 80035bc:	60da      	str	r2, [r3, #12]
      break;
 80035be:	e002      	b.n	80035c6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	73fb      	strb	r3, [r7, #15]
      break;
 80035c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80035c6:	7bfb      	ldrb	r3, [r7, #15]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d161      	bne.n	8003690 <HAL_TIM_OC_Stop_IT+0x168>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2200      	movs	r2, #0
 80035d2:	6839      	ldr	r1, [r7, #0]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f000 fc2f 	bl	8003e38 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a2f      	ldr	r2, [pc, #188]	@ (800369c <HAL_TIM_OC_Stop_IT+0x174>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d004      	beq.n	80035ee <HAL_TIM_OC_Stop_IT+0xc6>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a2d      	ldr	r2, [pc, #180]	@ (80036a0 <HAL_TIM_OC_Stop_IT+0x178>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d101      	bne.n	80035f2 <HAL_TIM_OC_Stop_IT+0xca>
 80035ee:	2301      	movs	r3, #1
 80035f0:	e000      	b.n	80035f4 <HAL_TIM_OC_Stop_IT+0xcc>
 80035f2:	2300      	movs	r3, #0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d017      	beq.n	8003628 <HAL_TIM_OC_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6a1a      	ldr	r2, [r3, #32]
 80035fe:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003602:	4013      	ands	r3, r2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10f      	bne.n	8003628 <HAL_TIM_OC_Stop_IT+0x100>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6a1a      	ldr	r2, [r3, #32]
 800360e:	f240 4344 	movw	r3, #1092	@ 0x444
 8003612:	4013      	ands	r3, r2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d107      	bne.n	8003628 <HAL_TIM_OC_Stop_IT+0x100>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003626:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6a1a      	ldr	r2, [r3, #32]
 800362e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003632:	4013      	ands	r3, r2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10f      	bne.n	8003658 <HAL_TIM_OC_Stop_IT+0x130>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6a1a      	ldr	r2, [r3, #32]
 800363e:	f240 4344 	movw	r3, #1092	@ 0x444
 8003642:	4013      	ands	r3, r2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d107      	bne.n	8003658 <HAL_TIM_OC_Stop_IT+0x130>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 0201 	bic.w	r2, r2, #1
 8003656:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d104      	bne.n	8003668 <HAL_TIM_OC_Stop_IT+0x140>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003666:	e013      	b.n	8003690 <HAL_TIM_OC_Stop_IT+0x168>
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	2b04      	cmp	r3, #4
 800366c:	d104      	bne.n	8003678 <HAL_TIM_OC_Stop_IT+0x150>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003676:	e00b      	b.n	8003690 <HAL_TIM_OC_Stop_IT+0x168>
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	2b08      	cmp	r3, #8
 800367c:	d104      	bne.n	8003688 <HAL_TIM_OC_Stop_IT+0x160>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003686:	e003      	b.n	8003690 <HAL_TIM_OC_Stop_IT+0x168>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8003690:	7bfb      	ldrb	r3, [r7, #15]
}
 8003692:	4618      	mov	r0, r3
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	40010000 	.word	0x40010000
 80036a0:	40010400 	.word	0x40010400

080036a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d020      	beq.n	8003708 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d01b      	beq.n	8003708 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f06f 0202 	mvn.w	r2, #2
 80036d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	f003 0303 	and.w	r3, r3, #3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f92e 	bl	8003950 <HAL_TIM_IC_CaptureCallback>
 80036f4:	e005      	b.n	8003702 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 ffd2 	bl	80046a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f931 	bl	8003964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f003 0304 	and.w	r3, r3, #4
 800370e:	2b00      	cmp	r3, #0
 8003710:	d020      	beq.n	8003754 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b00      	cmp	r3, #0
 800371a:	d01b      	beq.n	8003754 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f06f 0204 	mvn.w	r2, #4
 8003724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2202      	movs	r2, #2
 800372a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f908 	bl	8003950 <HAL_TIM_IC_CaptureCallback>
 8003740:	e005      	b.n	800374e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 ffac 	bl	80046a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 f90b 	bl	8003964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f003 0308 	and.w	r3, r3, #8
 800375a:	2b00      	cmp	r3, #0
 800375c:	d020      	beq.n	80037a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f003 0308 	and.w	r3, r3, #8
 8003764:	2b00      	cmp	r3, #0
 8003766:	d01b      	beq.n	80037a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f06f 0208 	mvn.w	r2, #8
 8003770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2204      	movs	r2, #4
 8003776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	f003 0303 	and.w	r3, r3, #3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f8e2 	bl	8003950 <HAL_TIM_IC_CaptureCallback>
 800378c:	e005      	b.n	800379a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 ff86 	bl	80046a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 f8e5 	bl	8003964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	f003 0310 	and.w	r3, r3, #16
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d020      	beq.n	80037ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f003 0310 	and.w	r3, r3, #16
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d01b      	beq.n	80037ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f06f 0210 	mvn.w	r2, #16
 80037bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2208      	movs	r2, #8
 80037c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f8bc 	bl	8003950 <HAL_TIM_IC_CaptureCallback>
 80037d8:	e005      	b.n	80037e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 ff60 	bl	80046a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 f8bf 	bl	8003964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00c      	beq.n	8003810 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d007      	beq.n	8003810 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f06f 0201 	mvn.w	r2, #1
 8003808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f896 	bl	800393c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00c      	beq.n	8003834 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003820:	2b00      	cmp	r3, #0
 8003822:	d007      	beq.n	8003834 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800382c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 fb31 	bl	8003e96 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00c      	beq.n	8003858 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003844:	2b00      	cmp	r3, #0
 8003846:	d007      	beq.n	8003858 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f890 	bl	8003978 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	f003 0320 	and.w	r3, r3, #32
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00c      	beq.n	800387c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f003 0320 	and.w	r3, r3, #32
 8003868:	2b00      	cmp	r3, #0
 800386a:	d007      	beq.n	800387c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f06f 0220 	mvn.w	r2, #32
 8003874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 fb03 	bl	8003e82 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800387c:	bf00      	nop
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003890:	2300      	movs	r3, #0
 8003892:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800389a:	2b01      	cmp	r3, #1
 800389c:	d101      	bne.n	80038a2 <HAL_TIM_OC_ConfigChannel+0x1e>
 800389e:	2302      	movs	r3, #2
 80038a0:	e048      	b.n	8003934 <HAL_TIM_OC_ConfigChannel+0xb0>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b0c      	cmp	r3, #12
 80038ae:	d839      	bhi.n	8003924 <HAL_TIM_OC_ConfigChannel+0xa0>
 80038b0:	a201      	add	r2, pc, #4	@ (adr r2, 80038b8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80038b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b6:	bf00      	nop
 80038b8:	080038ed 	.word	0x080038ed
 80038bc:	08003925 	.word	0x08003925
 80038c0:	08003925 	.word	0x08003925
 80038c4:	08003925 	.word	0x08003925
 80038c8:	080038fb 	.word	0x080038fb
 80038cc:	08003925 	.word	0x08003925
 80038d0:	08003925 	.word	0x08003925
 80038d4:	08003925 	.word	0x08003925
 80038d8:	08003909 	.word	0x08003909
 80038dc:	08003925 	.word	0x08003925
 80038e0:	08003925 	.word	0x08003925
 80038e4:	08003925 	.word	0x08003925
 80038e8:	08003917 	.word	0x08003917
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68b9      	ldr	r1, [r7, #8]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 f8f0 	bl	8003ad8 <TIM_OC1_SetConfig>
      break;
 80038f8:	e017      	b.n	800392a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68b9      	ldr	r1, [r7, #8]
 8003900:	4618      	mov	r0, r3
 8003902:	f000 f959 	bl	8003bb8 <TIM_OC2_SetConfig>
      break;
 8003906:	e010      	b.n	800392a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68b9      	ldr	r1, [r7, #8]
 800390e:	4618      	mov	r0, r3
 8003910:	f000 f9c8 	bl	8003ca4 <TIM_OC3_SetConfig>
      break;
 8003914:	e009      	b.n	800392a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68b9      	ldr	r1, [r7, #8]
 800391c:	4618      	mov	r0, r3
 800391e:	f000 fa35 	bl	8003d8c <TIM_OC4_SetConfig>
      break;
 8003922:	e002      	b.n	800392a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	75fb      	strb	r3, [r7, #23]
      break;
 8003928:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003932:	7dfb      	ldrb	r3, [r7, #23]
}
 8003934:	4618      	mov	r0, r3
 8003936:	3718      	adds	r7, #24
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a43      	ldr	r2, [pc, #268]	@ (8003aac <TIM_Base_SetConfig+0x120>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d013      	beq.n	80039cc <TIM_Base_SetConfig+0x40>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039aa:	d00f      	beq.n	80039cc <TIM_Base_SetConfig+0x40>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a40      	ldr	r2, [pc, #256]	@ (8003ab0 <TIM_Base_SetConfig+0x124>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d00b      	beq.n	80039cc <TIM_Base_SetConfig+0x40>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a3f      	ldr	r2, [pc, #252]	@ (8003ab4 <TIM_Base_SetConfig+0x128>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d007      	beq.n	80039cc <TIM_Base_SetConfig+0x40>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a3e      	ldr	r2, [pc, #248]	@ (8003ab8 <TIM_Base_SetConfig+0x12c>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d003      	beq.n	80039cc <TIM_Base_SetConfig+0x40>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a3d      	ldr	r2, [pc, #244]	@ (8003abc <TIM_Base_SetConfig+0x130>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d108      	bne.n	80039de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	4313      	orrs	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a32      	ldr	r2, [pc, #200]	@ (8003aac <TIM_Base_SetConfig+0x120>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d02b      	beq.n	8003a3e <TIM_Base_SetConfig+0xb2>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039ec:	d027      	beq.n	8003a3e <TIM_Base_SetConfig+0xb2>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a2f      	ldr	r2, [pc, #188]	@ (8003ab0 <TIM_Base_SetConfig+0x124>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d023      	beq.n	8003a3e <TIM_Base_SetConfig+0xb2>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a2e      	ldr	r2, [pc, #184]	@ (8003ab4 <TIM_Base_SetConfig+0x128>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d01f      	beq.n	8003a3e <TIM_Base_SetConfig+0xb2>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a2d      	ldr	r2, [pc, #180]	@ (8003ab8 <TIM_Base_SetConfig+0x12c>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d01b      	beq.n	8003a3e <TIM_Base_SetConfig+0xb2>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a2c      	ldr	r2, [pc, #176]	@ (8003abc <TIM_Base_SetConfig+0x130>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d017      	beq.n	8003a3e <TIM_Base_SetConfig+0xb2>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a2b      	ldr	r2, [pc, #172]	@ (8003ac0 <TIM_Base_SetConfig+0x134>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d013      	beq.n	8003a3e <TIM_Base_SetConfig+0xb2>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a2a      	ldr	r2, [pc, #168]	@ (8003ac4 <TIM_Base_SetConfig+0x138>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d00f      	beq.n	8003a3e <TIM_Base_SetConfig+0xb2>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a29      	ldr	r2, [pc, #164]	@ (8003ac8 <TIM_Base_SetConfig+0x13c>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d00b      	beq.n	8003a3e <TIM_Base_SetConfig+0xb2>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a28      	ldr	r2, [pc, #160]	@ (8003acc <TIM_Base_SetConfig+0x140>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d007      	beq.n	8003a3e <TIM_Base_SetConfig+0xb2>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a27      	ldr	r2, [pc, #156]	@ (8003ad0 <TIM_Base_SetConfig+0x144>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d003      	beq.n	8003a3e <TIM_Base_SetConfig+0xb2>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a26      	ldr	r2, [pc, #152]	@ (8003ad4 <TIM_Base_SetConfig+0x148>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d108      	bne.n	8003a50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	689a      	ldr	r2, [r3, #8]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a0e      	ldr	r2, [pc, #56]	@ (8003aac <TIM_Base_SetConfig+0x120>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d003      	beq.n	8003a7e <TIM_Base_SetConfig+0xf2>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a10      	ldr	r2, [pc, #64]	@ (8003abc <TIM_Base_SetConfig+0x130>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d103      	bne.n	8003a86 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	691a      	ldr	r2, [r3, #16]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f043 0204 	orr.w	r2, r3, #4
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	601a      	str	r2, [r3, #0]
}
 8003a9e:	bf00      	nop
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	40010000 	.word	0x40010000
 8003ab0:	40000400 	.word	0x40000400
 8003ab4:	40000800 	.word	0x40000800
 8003ab8:	40000c00 	.word	0x40000c00
 8003abc:	40010400 	.word	0x40010400
 8003ac0:	40014000 	.word	0x40014000
 8003ac4:	40014400 	.word	0x40014400
 8003ac8:	40014800 	.word	0x40014800
 8003acc:	40001800 	.word	0x40001800
 8003ad0:	40001c00 	.word	0x40001c00
 8003ad4:	40002000 	.word	0x40002000

08003ad8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b087      	sub	sp, #28
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	f023 0201 	bic.w	r2, r3, #1
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f023 0303 	bic.w	r3, r3, #3
 8003b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	f023 0302 	bic.w	r3, r3, #2
 8003b20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a20      	ldr	r2, [pc, #128]	@ (8003bb0 <TIM_OC1_SetConfig+0xd8>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d003      	beq.n	8003b3c <TIM_OC1_SetConfig+0x64>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a1f      	ldr	r2, [pc, #124]	@ (8003bb4 <TIM_OC1_SetConfig+0xdc>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d10c      	bne.n	8003b56 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f023 0308 	bic.w	r3, r3, #8
 8003b42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	f023 0304 	bic.w	r3, r3, #4
 8003b54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a15      	ldr	r2, [pc, #84]	@ (8003bb0 <TIM_OC1_SetConfig+0xd8>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d003      	beq.n	8003b66 <TIM_OC1_SetConfig+0x8e>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a14      	ldr	r2, [pc, #80]	@ (8003bb4 <TIM_OC1_SetConfig+0xdc>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d111      	bne.n	8003b8a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	621a      	str	r2, [r3, #32]
}
 8003ba4:	bf00      	nop
 8003ba6:	371c      	adds	r7, #28
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr
 8003bb0:	40010000 	.word	0x40010000
 8003bb4:	40010400 	.word	0x40010400

08003bb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b087      	sub	sp, #28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	f023 0210 	bic.w	r2, r3, #16
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	021b      	lsls	r3, r3, #8
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	f023 0320 	bic.w	r3, r3, #32
 8003c02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	011b      	lsls	r3, r3, #4
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a22      	ldr	r2, [pc, #136]	@ (8003c9c <TIM_OC2_SetConfig+0xe4>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d003      	beq.n	8003c20 <TIM_OC2_SetConfig+0x68>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a21      	ldr	r2, [pc, #132]	@ (8003ca0 <TIM_OC2_SetConfig+0xe8>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d10d      	bne.n	8003c3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a17      	ldr	r2, [pc, #92]	@ (8003c9c <TIM_OC2_SetConfig+0xe4>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d003      	beq.n	8003c4c <TIM_OC2_SetConfig+0x94>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a16      	ldr	r2, [pc, #88]	@ (8003ca0 <TIM_OC2_SetConfig+0xe8>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d113      	bne.n	8003c74 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	621a      	str	r2, [r3, #32]
}
 8003c8e:	bf00      	nop
 8003c90:	371c      	adds	r7, #28
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	40010000 	.word	0x40010000
 8003ca0:	40010400 	.word	0x40010400

08003ca4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b087      	sub	sp, #28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f023 0303 	bic.w	r3, r3, #3
 8003cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003cec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	021b      	lsls	r3, r3, #8
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a21      	ldr	r2, [pc, #132]	@ (8003d84 <TIM_OC3_SetConfig+0xe0>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d003      	beq.n	8003d0a <TIM_OC3_SetConfig+0x66>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a20      	ldr	r2, [pc, #128]	@ (8003d88 <TIM_OC3_SetConfig+0xe4>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d10d      	bne.n	8003d26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	021b      	lsls	r3, r3, #8
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a16      	ldr	r2, [pc, #88]	@ (8003d84 <TIM_OC3_SetConfig+0xe0>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d003      	beq.n	8003d36 <TIM_OC3_SetConfig+0x92>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a15      	ldr	r2, [pc, #84]	@ (8003d88 <TIM_OC3_SetConfig+0xe4>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d113      	bne.n	8003d5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	011b      	lsls	r3, r3, #4
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	011b      	lsls	r3, r3, #4
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	697a      	ldr	r2, [r7, #20]
 8003d76:	621a      	str	r2, [r3, #32]
}
 8003d78:	bf00      	nop
 8003d7a:	371c      	adds	r7, #28
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	40010000 	.word	0x40010000
 8003d88:	40010400 	.word	0x40010400

08003d8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b087      	sub	sp, #28
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	021b      	lsls	r3, r3, #8
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003dd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	031b      	lsls	r3, r3, #12
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a12      	ldr	r2, [pc, #72]	@ (8003e30 <TIM_OC4_SetConfig+0xa4>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d003      	beq.n	8003df4 <TIM_OC4_SetConfig+0x68>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a11      	ldr	r2, [pc, #68]	@ (8003e34 <TIM_OC4_SetConfig+0xa8>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d109      	bne.n	8003e08 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003dfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	019b      	lsls	r3, r3, #6
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	621a      	str	r2, [r3, #32]
}
 8003e22:	bf00      	nop
 8003e24:	371c      	adds	r7, #28
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	40010000 	.word	0x40010000
 8003e34:	40010400 	.word	0x40010400

08003e38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b087      	sub	sp, #28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	f003 031f 	and.w	r3, r3, #31
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6a1a      	ldr	r2, [r3, #32]
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	401a      	ands	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6a1a      	ldr	r2, [r3, #32]
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	f003 031f 	and.w	r3, r3, #31
 8003e6a:	6879      	ldr	r1, [r7, #4]
 8003e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e70:	431a      	orrs	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	621a      	str	r2, [r3, #32]
}
 8003e76:	bf00      	nop
 8003e78:	371c      	adds	r7, #28
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr

08003e82 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b083      	sub	sp, #12
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e96:	b480      	push	{r7}
 8003e98:	b083      	sub	sp, #12
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e9e:	bf00      	nop
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b082      	sub	sp, #8
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e042      	b.n	8003f42 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d106      	bne.n	8003ed6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f7fc fee3 	bl	8000c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2224      	movs	r2, #36	@ 0x24
 8003eda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68da      	ldr	r2, [r3, #12]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003eec:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f82c 	bl	8003f4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	691a      	ldr	r2, [r3, #16]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f02:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	695a      	ldr	r2, [r3, #20]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f12:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68da      	ldr	r2, [r3, #12]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f22:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2220      	movs	r2, #32
 8003f36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
	...

08003f4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f50:	b0c0      	sub	sp, #256	@ 0x100
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f68:	68d9      	ldr	r1, [r3, #12]
 8003f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	ea40 0301 	orr.w	r3, r0, r1
 8003f74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	431a      	orrs	r2, r3
 8003f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003fa4:	f021 010c 	bic.w	r1, r1, #12
 8003fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003fb2:	430b      	orrs	r3, r1
 8003fb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc6:	6999      	ldr	r1, [r3, #24]
 8003fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	ea40 0301 	orr.w	r3, r0, r1
 8003fd2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	4b8f      	ldr	r3, [pc, #572]	@ (8004218 <UART_SetConfig+0x2cc>)
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d005      	beq.n	8003fec <UART_SetConfig+0xa0>
 8003fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	4b8d      	ldr	r3, [pc, #564]	@ (800421c <UART_SetConfig+0x2d0>)
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d104      	bne.n	8003ff6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003fec:	f7fe fbfc 	bl	80027e8 <HAL_RCC_GetPCLK2Freq>
 8003ff0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003ff4:	e003      	b.n	8003ffe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ff6:	f7fe fbe3 	bl	80027c0 <HAL_RCC_GetPCLK1Freq>
 8003ffa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004002:	69db      	ldr	r3, [r3, #28]
 8004004:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004008:	f040 810c 	bne.w	8004224 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800400c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004010:	2200      	movs	r2, #0
 8004012:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004016:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800401a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800401e:	4622      	mov	r2, r4
 8004020:	462b      	mov	r3, r5
 8004022:	1891      	adds	r1, r2, r2
 8004024:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004026:	415b      	adcs	r3, r3
 8004028:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800402a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800402e:	4621      	mov	r1, r4
 8004030:	eb12 0801 	adds.w	r8, r2, r1
 8004034:	4629      	mov	r1, r5
 8004036:	eb43 0901 	adc.w	r9, r3, r1
 800403a:	f04f 0200 	mov.w	r2, #0
 800403e:	f04f 0300 	mov.w	r3, #0
 8004042:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004046:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800404a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800404e:	4690      	mov	r8, r2
 8004050:	4699      	mov	r9, r3
 8004052:	4623      	mov	r3, r4
 8004054:	eb18 0303 	adds.w	r3, r8, r3
 8004058:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800405c:	462b      	mov	r3, r5
 800405e:	eb49 0303 	adc.w	r3, r9, r3
 8004062:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004072:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004076:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800407a:	460b      	mov	r3, r1
 800407c:	18db      	adds	r3, r3, r3
 800407e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004080:	4613      	mov	r3, r2
 8004082:	eb42 0303 	adc.w	r3, r2, r3
 8004086:	657b      	str	r3, [r7, #84]	@ 0x54
 8004088:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800408c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004090:	f7fc f8b8 	bl	8000204 <__aeabi_uldivmod>
 8004094:	4602      	mov	r2, r0
 8004096:	460b      	mov	r3, r1
 8004098:	4b61      	ldr	r3, [pc, #388]	@ (8004220 <UART_SetConfig+0x2d4>)
 800409a:	fba3 2302 	umull	r2, r3, r3, r2
 800409e:	095b      	lsrs	r3, r3, #5
 80040a0:	011c      	lsls	r4, r3, #4
 80040a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040a6:	2200      	movs	r2, #0
 80040a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80040ac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80040b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80040b4:	4642      	mov	r2, r8
 80040b6:	464b      	mov	r3, r9
 80040b8:	1891      	adds	r1, r2, r2
 80040ba:	64b9      	str	r1, [r7, #72]	@ 0x48
 80040bc:	415b      	adcs	r3, r3
 80040be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80040c4:	4641      	mov	r1, r8
 80040c6:	eb12 0a01 	adds.w	sl, r2, r1
 80040ca:	4649      	mov	r1, r9
 80040cc:	eb43 0b01 	adc.w	fp, r3, r1
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	f04f 0300 	mov.w	r3, #0
 80040d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040e4:	4692      	mov	sl, r2
 80040e6:	469b      	mov	fp, r3
 80040e8:	4643      	mov	r3, r8
 80040ea:	eb1a 0303 	adds.w	r3, sl, r3
 80040ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80040f2:	464b      	mov	r3, r9
 80040f4:	eb4b 0303 	adc.w	r3, fp, r3
 80040f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80040fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004108:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800410c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004110:	460b      	mov	r3, r1
 8004112:	18db      	adds	r3, r3, r3
 8004114:	643b      	str	r3, [r7, #64]	@ 0x40
 8004116:	4613      	mov	r3, r2
 8004118:	eb42 0303 	adc.w	r3, r2, r3
 800411c:	647b      	str	r3, [r7, #68]	@ 0x44
 800411e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004122:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004126:	f7fc f86d 	bl	8000204 <__aeabi_uldivmod>
 800412a:	4602      	mov	r2, r0
 800412c:	460b      	mov	r3, r1
 800412e:	4611      	mov	r1, r2
 8004130:	4b3b      	ldr	r3, [pc, #236]	@ (8004220 <UART_SetConfig+0x2d4>)
 8004132:	fba3 2301 	umull	r2, r3, r3, r1
 8004136:	095b      	lsrs	r3, r3, #5
 8004138:	2264      	movs	r2, #100	@ 0x64
 800413a:	fb02 f303 	mul.w	r3, r2, r3
 800413e:	1acb      	subs	r3, r1, r3
 8004140:	00db      	lsls	r3, r3, #3
 8004142:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004146:	4b36      	ldr	r3, [pc, #216]	@ (8004220 <UART_SetConfig+0x2d4>)
 8004148:	fba3 2302 	umull	r2, r3, r3, r2
 800414c:	095b      	lsrs	r3, r3, #5
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004154:	441c      	add	r4, r3
 8004156:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800415a:	2200      	movs	r2, #0
 800415c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004160:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004164:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004168:	4642      	mov	r2, r8
 800416a:	464b      	mov	r3, r9
 800416c:	1891      	adds	r1, r2, r2
 800416e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004170:	415b      	adcs	r3, r3
 8004172:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004174:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004178:	4641      	mov	r1, r8
 800417a:	1851      	adds	r1, r2, r1
 800417c:	6339      	str	r1, [r7, #48]	@ 0x30
 800417e:	4649      	mov	r1, r9
 8004180:	414b      	adcs	r3, r1
 8004182:	637b      	str	r3, [r7, #52]	@ 0x34
 8004184:	f04f 0200 	mov.w	r2, #0
 8004188:	f04f 0300 	mov.w	r3, #0
 800418c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004190:	4659      	mov	r1, fp
 8004192:	00cb      	lsls	r3, r1, #3
 8004194:	4651      	mov	r1, sl
 8004196:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800419a:	4651      	mov	r1, sl
 800419c:	00ca      	lsls	r2, r1, #3
 800419e:	4610      	mov	r0, r2
 80041a0:	4619      	mov	r1, r3
 80041a2:	4603      	mov	r3, r0
 80041a4:	4642      	mov	r2, r8
 80041a6:	189b      	adds	r3, r3, r2
 80041a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041ac:	464b      	mov	r3, r9
 80041ae:	460a      	mov	r2, r1
 80041b0:	eb42 0303 	adc.w	r3, r2, r3
 80041b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80041c4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80041c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80041cc:	460b      	mov	r3, r1
 80041ce:	18db      	adds	r3, r3, r3
 80041d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041d2:	4613      	mov	r3, r2
 80041d4:	eb42 0303 	adc.w	r3, r2, r3
 80041d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80041de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80041e2:	f7fc f80f 	bl	8000204 <__aeabi_uldivmod>
 80041e6:	4602      	mov	r2, r0
 80041e8:	460b      	mov	r3, r1
 80041ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004220 <UART_SetConfig+0x2d4>)
 80041ec:	fba3 1302 	umull	r1, r3, r3, r2
 80041f0:	095b      	lsrs	r3, r3, #5
 80041f2:	2164      	movs	r1, #100	@ 0x64
 80041f4:	fb01 f303 	mul.w	r3, r1, r3
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	3332      	adds	r3, #50	@ 0x32
 80041fe:	4a08      	ldr	r2, [pc, #32]	@ (8004220 <UART_SetConfig+0x2d4>)
 8004200:	fba2 2303 	umull	r2, r3, r2, r3
 8004204:	095b      	lsrs	r3, r3, #5
 8004206:	f003 0207 	and.w	r2, r3, #7
 800420a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4422      	add	r2, r4
 8004212:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004214:	e106      	b.n	8004424 <UART_SetConfig+0x4d8>
 8004216:	bf00      	nop
 8004218:	40011000 	.word	0x40011000
 800421c:	40011400 	.word	0x40011400
 8004220:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004224:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004228:	2200      	movs	r2, #0
 800422a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800422e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004232:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004236:	4642      	mov	r2, r8
 8004238:	464b      	mov	r3, r9
 800423a:	1891      	adds	r1, r2, r2
 800423c:	6239      	str	r1, [r7, #32]
 800423e:	415b      	adcs	r3, r3
 8004240:	627b      	str	r3, [r7, #36]	@ 0x24
 8004242:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004246:	4641      	mov	r1, r8
 8004248:	1854      	adds	r4, r2, r1
 800424a:	4649      	mov	r1, r9
 800424c:	eb43 0501 	adc.w	r5, r3, r1
 8004250:	f04f 0200 	mov.w	r2, #0
 8004254:	f04f 0300 	mov.w	r3, #0
 8004258:	00eb      	lsls	r3, r5, #3
 800425a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800425e:	00e2      	lsls	r2, r4, #3
 8004260:	4614      	mov	r4, r2
 8004262:	461d      	mov	r5, r3
 8004264:	4643      	mov	r3, r8
 8004266:	18e3      	adds	r3, r4, r3
 8004268:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800426c:	464b      	mov	r3, r9
 800426e:	eb45 0303 	adc.w	r3, r5, r3
 8004272:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004282:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004286:	f04f 0200 	mov.w	r2, #0
 800428a:	f04f 0300 	mov.w	r3, #0
 800428e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004292:	4629      	mov	r1, r5
 8004294:	008b      	lsls	r3, r1, #2
 8004296:	4621      	mov	r1, r4
 8004298:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800429c:	4621      	mov	r1, r4
 800429e:	008a      	lsls	r2, r1, #2
 80042a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80042a4:	f7fb ffae 	bl	8000204 <__aeabi_uldivmod>
 80042a8:	4602      	mov	r2, r0
 80042aa:	460b      	mov	r3, r1
 80042ac:	4b60      	ldr	r3, [pc, #384]	@ (8004430 <UART_SetConfig+0x4e4>)
 80042ae:	fba3 2302 	umull	r2, r3, r3, r2
 80042b2:	095b      	lsrs	r3, r3, #5
 80042b4:	011c      	lsls	r4, r3, #4
 80042b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042ba:	2200      	movs	r2, #0
 80042bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80042c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80042c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80042c8:	4642      	mov	r2, r8
 80042ca:	464b      	mov	r3, r9
 80042cc:	1891      	adds	r1, r2, r2
 80042ce:	61b9      	str	r1, [r7, #24]
 80042d0:	415b      	adcs	r3, r3
 80042d2:	61fb      	str	r3, [r7, #28]
 80042d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042d8:	4641      	mov	r1, r8
 80042da:	1851      	adds	r1, r2, r1
 80042dc:	6139      	str	r1, [r7, #16]
 80042de:	4649      	mov	r1, r9
 80042e0:	414b      	adcs	r3, r1
 80042e2:	617b      	str	r3, [r7, #20]
 80042e4:	f04f 0200 	mov.w	r2, #0
 80042e8:	f04f 0300 	mov.w	r3, #0
 80042ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042f0:	4659      	mov	r1, fp
 80042f2:	00cb      	lsls	r3, r1, #3
 80042f4:	4651      	mov	r1, sl
 80042f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042fa:	4651      	mov	r1, sl
 80042fc:	00ca      	lsls	r2, r1, #3
 80042fe:	4610      	mov	r0, r2
 8004300:	4619      	mov	r1, r3
 8004302:	4603      	mov	r3, r0
 8004304:	4642      	mov	r2, r8
 8004306:	189b      	adds	r3, r3, r2
 8004308:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800430c:	464b      	mov	r3, r9
 800430e:	460a      	mov	r2, r1
 8004310:	eb42 0303 	adc.w	r3, r2, r3
 8004314:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004322:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004324:	f04f 0200 	mov.w	r2, #0
 8004328:	f04f 0300 	mov.w	r3, #0
 800432c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004330:	4649      	mov	r1, r9
 8004332:	008b      	lsls	r3, r1, #2
 8004334:	4641      	mov	r1, r8
 8004336:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800433a:	4641      	mov	r1, r8
 800433c:	008a      	lsls	r2, r1, #2
 800433e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004342:	f7fb ff5f 	bl	8000204 <__aeabi_uldivmod>
 8004346:	4602      	mov	r2, r0
 8004348:	460b      	mov	r3, r1
 800434a:	4611      	mov	r1, r2
 800434c:	4b38      	ldr	r3, [pc, #224]	@ (8004430 <UART_SetConfig+0x4e4>)
 800434e:	fba3 2301 	umull	r2, r3, r3, r1
 8004352:	095b      	lsrs	r3, r3, #5
 8004354:	2264      	movs	r2, #100	@ 0x64
 8004356:	fb02 f303 	mul.w	r3, r2, r3
 800435a:	1acb      	subs	r3, r1, r3
 800435c:	011b      	lsls	r3, r3, #4
 800435e:	3332      	adds	r3, #50	@ 0x32
 8004360:	4a33      	ldr	r2, [pc, #204]	@ (8004430 <UART_SetConfig+0x4e4>)
 8004362:	fba2 2303 	umull	r2, r3, r2, r3
 8004366:	095b      	lsrs	r3, r3, #5
 8004368:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800436c:	441c      	add	r4, r3
 800436e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004372:	2200      	movs	r2, #0
 8004374:	673b      	str	r3, [r7, #112]	@ 0x70
 8004376:	677a      	str	r2, [r7, #116]	@ 0x74
 8004378:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800437c:	4642      	mov	r2, r8
 800437e:	464b      	mov	r3, r9
 8004380:	1891      	adds	r1, r2, r2
 8004382:	60b9      	str	r1, [r7, #8]
 8004384:	415b      	adcs	r3, r3
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800438c:	4641      	mov	r1, r8
 800438e:	1851      	adds	r1, r2, r1
 8004390:	6039      	str	r1, [r7, #0]
 8004392:	4649      	mov	r1, r9
 8004394:	414b      	adcs	r3, r1
 8004396:	607b      	str	r3, [r7, #4]
 8004398:	f04f 0200 	mov.w	r2, #0
 800439c:	f04f 0300 	mov.w	r3, #0
 80043a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043a4:	4659      	mov	r1, fp
 80043a6:	00cb      	lsls	r3, r1, #3
 80043a8:	4651      	mov	r1, sl
 80043aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043ae:	4651      	mov	r1, sl
 80043b0:	00ca      	lsls	r2, r1, #3
 80043b2:	4610      	mov	r0, r2
 80043b4:	4619      	mov	r1, r3
 80043b6:	4603      	mov	r3, r0
 80043b8:	4642      	mov	r2, r8
 80043ba:	189b      	adds	r3, r3, r2
 80043bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043be:	464b      	mov	r3, r9
 80043c0:	460a      	mov	r2, r1
 80043c2:	eb42 0303 	adc.w	r3, r2, r3
 80043c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80043c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80043d2:	667a      	str	r2, [r7, #100]	@ 0x64
 80043d4:	f04f 0200 	mov.w	r2, #0
 80043d8:	f04f 0300 	mov.w	r3, #0
 80043dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80043e0:	4649      	mov	r1, r9
 80043e2:	008b      	lsls	r3, r1, #2
 80043e4:	4641      	mov	r1, r8
 80043e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043ea:	4641      	mov	r1, r8
 80043ec:	008a      	lsls	r2, r1, #2
 80043ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80043f2:	f7fb ff07 	bl	8000204 <__aeabi_uldivmod>
 80043f6:	4602      	mov	r2, r0
 80043f8:	460b      	mov	r3, r1
 80043fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004430 <UART_SetConfig+0x4e4>)
 80043fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004400:	095b      	lsrs	r3, r3, #5
 8004402:	2164      	movs	r1, #100	@ 0x64
 8004404:	fb01 f303 	mul.w	r3, r1, r3
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	011b      	lsls	r3, r3, #4
 800440c:	3332      	adds	r3, #50	@ 0x32
 800440e:	4a08      	ldr	r2, [pc, #32]	@ (8004430 <UART_SetConfig+0x4e4>)
 8004410:	fba2 2303 	umull	r2, r3, r2, r3
 8004414:	095b      	lsrs	r3, r3, #5
 8004416:	f003 020f 	and.w	r2, r3, #15
 800441a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4422      	add	r2, r4
 8004422:	609a      	str	r2, [r3, #8]
}
 8004424:	bf00      	nop
 8004426:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800442a:	46bd      	mov	sp, r7
 800442c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004430:	51eb851f 	.word	0x51eb851f

08004434 <servo_driver_init>:
};

static I2C_HandleTypeDef *servo_i2c_handle = NULL;

void servo_driver_init(I2C_HandleTypeDef *hi2c)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
	servo_i2c_handle = hi2c;
 800443c:	4a1a      	ldr	r2, [pc, #104]	@ (80044a8 <servo_driver_init+0x74>)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6013      	str	r3, [r2, #0]


	// Servo driver must be in sleep prior to configuring pre scale
	servo_driver_sleep();
 8004442:	f000 f8d5 	bl	80045f0 <servo_driver_sleep>

	/* Set the pre scale to make PWM outputs to motors 50Hz */
	servo_driver_set_prescale(SERVO_MOTOR_FREQUENCY_HZ);
 8004446:	2032      	movs	r0, #50	@ 0x32
 8004448:	f000 f8ac 	bl	80045a4 <servo_driver_set_prescale>

	// Wakeup servo driver, requires 500us max for oscillator to be up
	servo_driver_wakeup();
 800444c:	f000 f8fc 	bl	8004648 <servo_driver_wakeup>
	HAL_Delay(1);
 8004450:	2001      	movs	r0, #1
 8004452:	f7fc fd53 	bl	8000efc <HAL_Delay>


	//Configure shoulders to default position
	servo_set_pwm(&servos[CH0_LEFT_SHOULDER], servos[CH0_LEFT_SHOULDER].current_tick);
 8004456:	4b15      	ldr	r3, [pc, #84]	@ (80044ac <servo_driver_init+0x78>)
 8004458:	891b      	ldrh	r3, [r3, #8]
 800445a:	4619      	mov	r1, r3
 800445c:	4813      	ldr	r0, [pc, #76]	@ (80044ac <servo_driver_init+0x78>)
 800445e:	f000 f831 	bl	80044c4 <servo_set_pwm>
	servo_set_pwm(&servos[CH1_RIGHT_SHOULDER], servos[CH1_RIGHT_SHOULDER].current_tick);
 8004462:	4b12      	ldr	r3, [pc, #72]	@ (80044ac <servo_driver_init+0x78>)
 8004464:	8a5b      	ldrh	r3, [r3, #18]
 8004466:	4619      	mov	r1, r3
 8004468:	4811      	ldr	r0, [pc, #68]	@ (80044b0 <servo_driver_init+0x7c>)
 800446a:	f000 f82b 	bl	80044c4 <servo_set_pwm>

	//Configure elbow to default position
	servo_set_pwm(&servos[CH2_ELBOW], servos[CH2_ELBOW].current_tick);
 800446e:	4b0f      	ldr	r3, [pc, #60]	@ (80044ac <servo_driver_init+0x78>)
 8004470:	8b9b      	ldrh	r3, [r3, #28]
 8004472:	4619      	mov	r1, r3
 8004474:	480f      	ldr	r0, [pc, #60]	@ (80044b4 <servo_driver_init+0x80>)
 8004476:	f000 f825 	bl	80044c4 <servo_set_pwm>

	//Configure wrist to default position
	servo_set_pwm(&servos[CH3_WRIST], servos[CH3_WRIST].current_tick);
 800447a:	4b0c      	ldr	r3, [pc, #48]	@ (80044ac <servo_driver_init+0x78>)
 800447c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800447e:	4619      	mov	r1, r3
 8004480:	480d      	ldr	r0, [pc, #52]	@ (80044b8 <servo_driver_init+0x84>)
 8004482:	f000 f81f 	bl	80044c4 <servo_set_pwm>

	//Configure gripper rotation to default position
	servo_set_pwm(&servos[CH4_GRIPPER_ROTATOR], servos[CH4_GRIPPER_ROTATOR].current_tick);
 8004486:	4b09      	ldr	r3, [pc, #36]	@ (80044ac <servo_driver_init+0x78>)
 8004488:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800448a:	4619      	mov	r1, r3
 800448c:	480b      	ldr	r0, [pc, #44]	@ (80044bc <servo_driver_init+0x88>)
 800448e:	f000 f819 	bl	80044c4 <servo_set_pwm>

	//Configure gripper to default position
	servo_set_pwm(&servos[CH5_GRIPPER], servos[CH5_GRIPPER].current_tick);
 8004492:	4b06      	ldr	r3, [pc, #24]	@ (80044ac <servo_driver_init+0x78>)
 8004494:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8004496:	4619      	mov	r1, r3
 8004498:	4809      	ldr	r0, [pc, #36]	@ (80044c0 <servo_driver_init+0x8c>)
 800449a:	f000 f813 	bl	80044c4 <servo_set_pwm>
}
 800449e:	bf00      	nop
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	2000014c 	.word	0x2000014c
 80044ac:	2000000c 	.word	0x2000000c
 80044b0:	20000016 	.word	0x20000016
 80044b4:	20000020 	.word	0x20000020
 80044b8:	2000002a 	.word	0x2000002a
 80044bc:	20000034 	.word	0x20000034
 80044c0:	2000003e 	.word	0x2000003e

080044c4 <servo_set_pwm>:
/* 	 PCA9685 PWM channels have 4096 steps.
	 on_l and on_h set when the signal goes HIGH; off_l and off_h set when it goes LOW.
	 For our servos, we always start HIGH immediately (on_l = on_h = 0),
	 and off_l/off_h are set according to servo_tick to control the servo position. */
void servo_set_pwm(servo_config_t *servo, uint16_t servo_tick)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b088      	sub	sp, #32
 80044c8:	af04      	add	r7, sp, #16
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	460b      	mov	r3, r1
 80044ce:	807b      	strh	r3, [r7, #2]
	uint8_t pwm_low_step = 0;
 80044d0:	2300      	movs	r3, #0
 80044d2:	73fb      	strb	r3, [r7, #15]
	uint8_t pwm_high_step = 0;
 80044d4:	2300      	movs	r3, #0
 80044d6:	73bb      	strb	r3, [r7, #14]

	const servo_channel_registers_t servo_regs = servo_register_map[servo->channel];
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	461a      	mov	r2, r3
 80044de:	4b2f      	ldr	r3, [pc, #188]	@ (800459c <servo_set_pwm+0xd8>)
 80044e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044e4:	60bb      	str	r3, [r7, #8]

	//Ensure servo is set within servo motor tick boundary
	if (servo_tick > servo->max_tick || servo_tick < servo->min_tick) { return; }
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	889b      	ldrh	r3, [r3, #4]
 80044ea:	887a      	ldrh	r2, [r7, #2]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d850      	bhi.n	8004592 <servo_set_pwm+0xce>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	885b      	ldrh	r3, [r3, #2]
 80044f4:	887a      	ldrh	r2, [r7, #2]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d34b      	bcc.n	8004592 <servo_set_pwm+0xce>

	//Channel PWM set to ON (HIGH) right immediately (i.e. on_l = on_h = 0)
	HAL_I2C_Mem_Write(servo_i2c_handle, SERVO_DRIVER_I2C_ADDR << 1, servo_regs.on_l, 1, &pwm_low_step, 1, SERVO_DRIVER_I2C_TIMEOUT);
 80044fa:	4b29      	ldr	r3, [pc, #164]	@ (80045a0 <servo_set_pwm+0xdc>)
 80044fc:	6818      	ldr	r0, [r3, #0]
 80044fe:	7a3b      	ldrb	r3, [r7, #8]
 8004500:	461a      	mov	r2, r3
 8004502:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004506:	9302      	str	r3, [sp, #8]
 8004508:	2301      	movs	r3, #1
 800450a:	9301      	str	r3, [sp, #4]
 800450c:	f107 030f 	add.w	r3, r7, #15
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	2301      	movs	r3, #1
 8004514:	2180      	movs	r1, #128	@ 0x80
 8004516:	f7fd f931 	bl	800177c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(servo_i2c_handle, SERVO_DRIVER_I2C_ADDR << 1, servo_regs.on_h, 1, &pwm_high_step, 1, SERVO_DRIVER_I2C_TIMEOUT);
 800451a:	4b21      	ldr	r3, [pc, #132]	@ (80045a0 <servo_set_pwm+0xdc>)
 800451c:	6818      	ldr	r0, [r3, #0]
 800451e:	7a7b      	ldrb	r3, [r7, #9]
 8004520:	461a      	mov	r2, r3
 8004522:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004526:	9302      	str	r3, [sp, #8]
 8004528:	2301      	movs	r3, #1
 800452a:	9301      	str	r3, [sp, #4]
 800452c:	f107 030e 	add.w	r3, r7, #14
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	2301      	movs	r3, #1
 8004534:	2180      	movs	r1, #128	@ 0x80
 8004536:	f7fd f921 	bl	800177c <HAL_I2C_Mem_Write>

	// Set PWM pulse width based on servo_tick, in general, servo_tick = 80 = 0 degrees, servo_tick = 560 = 180 degrees.
	pwm_low_step = (uint8_t)servo_tick;
 800453a:	887b      	ldrh	r3, [r7, #2]
 800453c:	b2db      	uxtb	r3, r3
 800453e:	73fb      	strb	r3, [r7, #15]
	pwm_high_step = (uint8_t)(servo_tick >> 8);
 8004540:	887b      	ldrh	r3, [r7, #2]
 8004542:	0a1b      	lsrs	r3, r3, #8
 8004544:	b29b      	uxth	r3, r3
 8004546:	b2db      	uxtb	r3, r3
 8004548:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(servo_i2c_handle, SERVO_DRIVER_I2C_ADDR << 1, servo_regs.off_l, 1, &pwm_low_step, 1, SERVO_DRIVER_I2C_TIMEOUT);
 800454a:	4b15      	ldr	r3, [pc, #84]	@ (80045a0 <servo_set_pwm+0xdc>)
 800454c:	6818      	ldr	r0, [r3, #0]
 800454e:	7abb      	ldrb	r3, [r7, #10]
 8004550:	461a      	mov	r2, r3
 8004552:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004556:	9302      	str	r3, [sp, #8]
 8004558:	2301      	movs	r3, #1
 800455a:	9301      	str	r3, [sp, #4]
 800455c:	f107 030f 	add.w	r3, r7, #15
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	2301      	movs	r3, #1
 8004564:	2180      	movs	r1, #128	@ 0x80
 8004566:	f7fd f909 	bl	800177c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(servo_i2c_handle, SERVO_DRIVER_I2C_ADDR << 1, servo_regs.off_h, 1, &pwm_high_step, 1, SERVO_DRIVER_I2C_TIMEOUT);
 800456a:	4b0d      	ldr	r3, [pc, #52]	@ (80045a0 <servo_set_pwm+0xdc>)
 800456c:	6818      	ldr	r0, [r3, #0]
 800456e:	7afb      	ldrb	r3, [r7, #11]
 8004570:	461a      	mov	r2, r3
 8004572:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004576:	9302      	str	r3, [sp, #8]
 8004578:	2301      	movs	r3, #1
 800457a:	9301      	str	r3, [sp, #4]
 800457c:	f107 030e 	add.w	r3, r7, #14
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	2301      	movs	r3, #1
 8004584:	2180      	movs	r1, #128	@ 0x80
 8004586:	f7fd f8f9 	bl	800177c <HAL_I2C_Mem_Write>


	servo->current_tick = servo_tick;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	887a      	ldrh	r2, [r7, #2]
 800458e:	811a      	strh	r2, [r3, #8]
 8004590:	e000      	b.n	8004594 <servo_set_pwm+0xd0>
	if (servo_tick > servo->max_tick || servo_tick < servo->min_tick) { return; }
 8004592:	bf00      	nop
}
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	0800476c 	.word	0x0800476c
 80045a0:	2000014c 	.word	0x2000014c

080045a4 <servo_driver_set_prescale>:
  * @brief  Sets servo driver output frequency in hertz (hz)
  * @param  output_freq Output frequency in hz

  */
void servo_driver_set_prescale(uint16_t output_freq)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b088      	sub	sp, #32
 80045a8:	af04      	add	r7, sp, #16
 80045aa:	4603      	mov	r3, r0
 80045ac:	80fb      	strh	r3, [r7, #6]
	uint8_t write_reg_temp;

	write_reg_temp = ((SERVO_DRIVER_OSCILLATOR_FREQ) / (SERVO_DRIVER_PWM_STEPS * output_freq)) - 1;
 80045ae:	88fb      	ldrh	r3, [r7, #6]
 80045b0:	031b      	lsls	r3, r3, #12
 80045b2:	4a0d      	ldr	r2, [pc, #52]	@ (80045e8 <servo_driver_set_prescale+0x44>)
 80045b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	3b01      	subs	r3, #1
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(servo_i2c_handle, SERVO_DRIVER_I2C_ADDR << 1, SERVO_DRIVER_PRE_SCALE_REG_ADDR, 1, &write_reg_temp, 1, SERVO_DRIVER_I2C_TIMEOUT);
 80045c0:	4b0a      	ldr	r3, [pc, #40]	@ (80045ec <servo_driver_set_prescale+0x48>)
 80045c2:	6818      	ldr	r0, [r3, #0]
 80045c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80045c8:	9302      	str	r3, [sp, #8]
 80045ca:	2301      	movs	r3, #1
 80045cc:	9301      	str	r3, [sp, #4]
 80045ce:	f107 030f 	add.w	r3, r7, #15
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	2301      	movs	r3, #1
 80045d6:	22fe      	movs	r2, #254	@ 0xfe
 80045d8:	2180      	movs	r1, #128	@ 0x80
 80045da:	f7fd f8cf 	bl	800177c <HAL_I2C_Mem_Write>
}
 80045de:	bf00      	nop
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	017d7840 	.word	0x017d7840
 80045ec:	2000014c 	.word	0x2000014c

080045f0 <servo_driver_sleep>:

void servo_driver_sleep()
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af04      	add	r7, sp, #16
	uint8_t write_reg_temp;
	uint8_t read_reg_temp;

	//Read Mode1 register
	HAL_I2C_Mem_Read(servo_i2c_handle, SERVO_DRIVER_I2C_ADDR << 1, SERVO_DRIVER_MODE1_REG_ADDR, 1, &read_reg_temp, 1, SERVO_DRIVER_I2C_TIMEOUT);
 80045f6:	4b13      	ldr	r3, [pc, #76]	@ (8004644 <servo_driver_sleep+0x54>)
 80045f8:	6818      	ldr	r0, [r3, #0]
 80045fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80045fe:	9302      	str	r3, [sp, #8]
 8004600:	2301      	movs	r3, #1
 8004602:	9301      	str	r3, [sp, #4]
 8004604:	1dbb      	adds	r3, r7, #6
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	2301      	movs	r3, #1
 800460a:	2200      	movs	r2, #0
 800460c:	2180      	movs	r1, #128	@ 0x80
 800460e:	f7fd f9af 	bl	8001970 <HAL_I2C_Mem_Read>

	// Set the sleep bit in MODE1 register
	write_reg_temp = read_reg_temp;
 8004612:	79bb      	ldrb	r3, [r7, #6]
 8004614:	71fb      	strb	r3, [r7, #7]
	write_reg_temp |= (1 << 4);
 8004616:	79fb      	ldrb	r3, [r7, #7]
 8004618:	f043 0310 	orr.w	r3, r3, #16
 800461c:	b2db      	uxtb	r3, r3
 800461e:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(servo_i2c_handle, SERVO_DRIVER_I2C_ADDR << 1, SERVO_DRIVER_MODE1_REG_ADDR, 1, &write_reg_temp, 1, SERVO_DRIVER_I2C_TIMEOUT);
 8004620:	4b08      	ldr	r3, [pc, #32]	@ (8004644 <servo_driver_sleep+0x54>)
 8004622:	6818      	ldr	r0, [r3, #0]
 8004624:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004628:	9302      	str	r3, [sp, #8]
 800462a:	2301      	movs	r3, #1
 800462c:	9301      	str	r3, [sp, #4]
 800462e:	1dfb      	adds	r3, r7, #7
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	2301      	movs	r3, #1
 8004634:	2200      	movs	r2, #0
 8004636:	2180      	movs	r1, #128	@ 0x80
 8004638:	f7fd f8a0 	bl	800177c <HAL_I2C_Mem_Write>
}
 800463c:	bf00      	nop
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	2000014c 	.word	0x2000014c

08004648 <servo_driver_wakeup>:

void servo_driver_wakeup()
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af04      	add	r7, sp, #16
	uint8_t write_reg_temp;
	uint8_t read_reg_temp;

	//Read Mode1 register
	HAL_I2C_Mem_Read(servo_i2c_handle, SERVO_DRIVER_I2C_ADDR << 1, SERVO_DRIVER_MODE1_REG_ADDR, 1, &read_reg_temp, 1, SERVO_DRIVER_I2C_TIMEOUT);
 800464e:	4b13      	ldr	r3, [pc, #76]	@ (800469c <servo_driver_wakeup+0x54>)
 8004650:	6818      	ldr	r0, [r3, #0]
 8004652:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004656:	9302      	str	r3, [sp, #8]
 8004658:	2301      	movs	r3, #1
 800465a:	9301      	str	r3, [sp, #4]
 800465c:	1dbb      	adds	r3, r7, #6
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	2301      	movs	r3, #1
 8004662:	2200      	movs	r2, #0
 8004664:	2180      	movs	r1, #128	@ 0x80
 8004666:	f7fd f983 	bl	8001970 <HAL_I2C_Mem_Read>

	// Set the sleep bit in MODE1 register
	write_reg_temp = read_reg_temp;
 800466a:	79bb      	ldrb	r3, [r7, #6]
 800466c:	71fb      	strb	r3, [r7, #7]
	write_reg_temp &= ~(1 << 4);
 800466e:	79fb      	ldrb	r3, [r7, #7]
 8004670:	f023 0310 	bic.w	r3, r3, #16
 8004674:	b2db      	uxtb	r3, r3
 8004676:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(servo_i2c_handle, SERVO_DRIVER_I2C_ADDR << 1, SERVO_DRIVER_MODE1_REG_ADDR, 1, &write_reg_temp, 1, SERVO_DRIVER_I2C_TIMEOUT);
 8004678:	4b08      	ldr	r3, [pc, #32]	@ (800469c <servo_driver_wakeup+0x54>)
 800467a:	6818      	ldr	r0, [r3, #0]
 800467c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004680:	9302      	str	r3, [sp, #8]
 8004682:	2301      	movs	r3, #1
 8004684:	9301      	str	r3, [sp, #4]
 8004686:	1dfb      	adds	r3, r7, #7
 8004688:	9300      	str	r3, [sp, #0]
 800468a:	2301      	movs	r3, #1
 800468c:	2200      	movs	r2, #0
 800468e:	2180      	movs	r1, #128	@ 0x80
 8004690:	f7fd f874 	bl	800177c <HAL_I2C_Mem_Write>
}
 8004694:	bf00      	nop
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	2000014c 	.word	0x2000014c

080046a0 <HAL_TIM_OC_DelayElapsedCallback>:
		HAL_GPIO_WritePin(DIR_PIN_GPIO_Port, DIR_PIN_Pin, GPIO_PIN_SET);
	}
}

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
   if (htim->Instance == TIM10)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a0b      	ldr	r2, [pc, #44]	@ (80046dc <HAL_TIM_OC_DelayElapsedCallback+0x3c>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d10f      	bne.n	80046d2 <HAL_TIM_OC_DelayElapsedCallback+0x32>
   {
	   stepper_step_count++;
 80046b2:	4b0b      	ldr	r3, [pc, #44]	@ (80046e0 <HAL_TIM_OC_DelayElapsedCallback+0x40>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	3301      	adds	r3, #1
 80046b8:	4a09      	ldr	r2, [pc, #36]	@ (80046e0 <HAL_TIM_OC_DelayElapsedCallback+0x40>)
 80046ba:	6013      	str	r3, [r2, #0]

	   // Deceleration ramp for last 20 steps
	   if (stepper_step_count >= STEPS_AMOUNT * 2) //Multiply by 2 as stepper_step_count increments on rising and falling edge of STEP GPIO output
 80046bc:	4b08      	ldr	r3, [pc, #32]	@ (80046e0 <HAL_TIM_OC_DelayElapsedCallback+0x40>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2b31      	cmp	r3, #49	@ 0x31
 80046c2:	dd06      	ble.n	80046d2 <HAL_TIM_OC_DelayElapsedCallback+0x32>
	   {
		   HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_1);
 80046c4:	2100      	movs	r1, #0
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f7fe ff2e 	bl	8003528 <HAL_TIM_OC_Stop_IT>
		   stepper_step_count = 0;
 80046cc:	4b04      	ldr	r3, [pc, #16]	@ (80046e0 <HAL_TIM_OC_DelayElapsedCallback+0x40>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	601a      	str	r2, [r3, #0]
	   }

   }
}
 80046d2:	bf00      	nop
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	40014400 	.word	0x40014400
 80046e0:	20000150 	.word	0x20000150

080046e4 <memset>:
 80046e4:	4402      	add	r2, r0
 80046e6:	4603      	mov	r3, r0
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d100      	bne.n	80046ee <memset+0xa>
 80046ec:	4770      	bx	lr
 80046ee:	f803 1b01 	strb.w	r1, [r3], #1
 80046f2:	e7f9      	b.n	80046e8 <memset+0x4>

080046f4 <__libc_init_array>:
 80046f4:	b570      	push	{r4, r5, r6, lr}
 80046f6:	4d0d      	ldr	r5, [pc, #52]	@ (800472c <__libc_init_array+0x38>)
 80046f8:	4c0d      	ldr	r4, [pc, #52]	@ (8004730 <__libc_init_array+0x3c>)
 80046fa:	1b64      	subs	r4, r4, r5
 80046fc:	10a4      	asrs	r4, r4, #2
 80046fe:	2600      	movs	r6, #0
 8004700:	42a6      	cmp	r6, r4
 8004702:	d109      	bne.n	8004718 <__libc_init_array+0x24>
 8004704:	4d0b      	ldr	r5, [pc, #44]	@ (8004734 <__libc_init_array+0x40>)
 8004706:	4c0c      	ldr	r4, [pc, #48]	@ (8004738 <__libc_init_array+0x44>)
 8004708:	f000 f818 	bl	800473c <_init>
 800470c:	1b64      	subs	r4, r4, r5
 800470e:	10a4      	asrs	r4, r4, #2
 8004710:	2600      	movs	r6, #0
 8004712:	42a6      	cmp	r6, r4
 8004714:	d105      	bne.n	8004722 <__libc_init_array+0x2e>
 8004716:	bd70      	pop	{r4, r5, r6, pc}
 8004718:	f855 3b04 	ldr.w	r3, [r5], #4
 800471c:	4798      	blx	r3
 800471e:	3601      	adds	r6, #1
 8004720:	e7ee      	b.n	8004700 <__libc_init_array+0xc>
 8004722:	f855 3b04 	ldr.w	r3, [r5], #4
 8004726:	4798      	blx	r3
 8004728:	3601      	adds	r6, #1
 800472a:	e7f2      	b.n	8004712 <__libc_init_array+0x1e>
 800472c:	0800478c 	.word	0x0800478c
 8004730:	0800478c 	.word	0x0800478c
 8004734:	0800478c 	.word	0x0800478c
 8004738:	08004790 	.word	0x08004790

0800473c <_init>:
 800473c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800473e:	bf00      	nop
 8004740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004742:	bc08      	pop	{r3}
 8004744:	469e      	mov	lr, r3
 8004746:	4770      	bx	lr

08004748 <_fini>:
 8004748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800474a:	bf00      	nop
 800474c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800474e:	bc08      	pop	{r3}
 8004750:	469e      	mov	lr, r3
 8004752:	4770      	bx	lr
